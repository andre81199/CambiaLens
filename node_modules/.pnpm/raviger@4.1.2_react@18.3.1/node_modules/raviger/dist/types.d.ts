export declare type EmptyRecord = Record<string | number | symbol, never>;
export declare type ValueOf<T> = T[keyof T];
export declare type NonEmptyRecord<Params> = Params extends EmptyRecord ? undefined : {
    [Key in keyof Params]: Params[Key];
};
export declare type Split<Value extends string, Separator extends string> = Value extends `${infer Head}${Separator}${infer Tail}` ? [Head, ...Split<Tail, Separator>] : Value extends Separator ? [] : [Value];
