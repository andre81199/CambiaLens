import React, { Ref } from 'react';
export interface LinkProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {
    href: string;
    basePath?: string;
    children?: React.ReactNode;
}
export declare type LinkRef = HTMLAnchorElement | null;
export interface ActiveLinkProps extends LinkProps {
    activeClass?: string;
    exactActiveClass?: string;
}
declare function Link({ href, basePath, ...props }: LinkProps, ref?: Ref<HTMLAnchorElement>): JSX.Element;
declare const RefLink: (props: LinkProps & {
    ref?: React.ForwardedRef<HTMLAnchorElement>;
}) => ReturnType<typeof Link>;
export default RefLink;
export { RefLink as Link };
declare function ActiveLink({ basePath, className, exactActiveClass, activeClass, ...props }: ActiveLinkProps, ref?: Ref<HTMLAnchorElement>): JSX.Element;
declare const ActiveLinkRef: (props: ActiveLinkProps & {
    ref?: React.ForwardedRef<HTMLAnchorElement>;
}) => ReturnType<typeof ActiveLink>;
export { ActiveLinkRef as ActiveLink };
