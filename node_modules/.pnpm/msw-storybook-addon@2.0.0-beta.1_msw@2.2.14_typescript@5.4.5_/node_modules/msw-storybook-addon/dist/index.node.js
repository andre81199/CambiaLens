"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  getWorker: () => getWorker,
  initialize: () => initialize,
  mswDecorator: () => mswDecorator,
  mswLoader: () => mswLoader
});
module.exports = __toCommonJS(src_exports);

// src/initialize.node.ts
var import_node = require("msw/node");

// src/augmentInitializeOptions.ts
var fileExtensionPattern = /\.(js|jsx|ts|tsx|mjs|woff|woff2|ttf|otf|eot)$/;
var filteredURLSubstrings = [
  "sb-common-assets",
  "node_modules",
  "node-modules",
  "hot-update.json",
  "__webpack_hmr",
  "sb-vite"
];
var shouldFilterUrl = (url) => {
  if (fileExtensionPattern.test(url)) {
    return true;
  }
  const isStorybookRequest = filteredURLSubstrings.some(
    (substring) => url.includes(substring)
  );
  if (isStorybookRequest) {
    return true;
  }
  return false;
};
var augmentInitializeOptions = (options) => {
  if (typeof options?.onUnhandledRequest === "string") {
    return options;
  }
  return {
    ...options,
    // Filter requests that we know are not relevant to the user e.g. HMR, builder requests, statics assets, etc.
    onUnhandledRequest: (...args) => {
      const [{ url }, print] = args;
      if (shouldFilterUrl(url)) {
        return;
      }
      if (!options?.onUnhandledRequest) {
        print.warning();
        return;
      }
      if (typeof options?.onUnhandledRequest === "function") {
        options.onUnhandledRequest(...args);
      }
    }
  };
};

// src/initialize.node.ts
var api;
function initialize(options, initialHandlers = []) {
  const server = (0, import_node.setupServer)(...initialHandlers);
  server.listen(augmentInitializeOptions(options));
  api = server;
  return server;
}
function getWorker() {
  if (api === void 0) {
    throw new Error(
      `[MSW] Failed to retrieve the worker: no active worker found. Did you forget to call "initialize"?`
    );
  }
  return api;
}

// src/applyRequestHandlers.ts
function applyRequestHandlers(handlersListOrObject) {
  api?.resetHandlers();
  if (handlersListOrObject == null) {
    return;
  }
  if (Array.isArray(handlersListOrObject) && handlersListOrObject.length > 0) {
    api.use(...handlersListOrObject);
    return;
  }
  if ("handlers" in handlersListOrObject && handlersListOrObject.handlers) {
    const handlers = Object.values(handlersListOrObject.handlers).filter(Boolean).reduce(
      (handlers2, handlersList) => handlers2.concat(handlersList),
      []
    );
    if (handlers.length > 0) {
      api.use(...handlers);
    }
    return;
  }
}

// src/decorator.ts
var mswDecorator = (storyFn, context) => {
  applyRequestHandlers(context.parameters.msw);
  return storyFn();
};

// src/loader.ts
var mswLoader = async (context) => {
  applyRequestHandlers(context.parameters.msw);
  if (typeof window !== "undefined" && "navigator" in window && navigator.serviceWorker.controller) {
    await navigator.serviceWorker.ready;
  }
  return {};
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getWorker,
  initialize,
  mswDecorator,
  mswLoader
});
