import {
  __commonJS,
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet,
  __publicField
} from "./chunk-BYPFWIQ6.js";

// node_modules/.pnpm/outvariant@1.4.2/node_modules/outvariant/lib/index.js
var require_lib = __commonJS({
  "node_modules/.pnpm/outvariant@1.4.2/node_modules/outvariant/lib/index.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export(src_exports, {
      InvariantError: () => InvariantError,
      format: () => format,
      invariant: () => invariant
    });
    module.exports = __toCommonJS(src_exports);
    var POSITIONALS_EXP = /(%?)(%([sdijo]))/g;
    function serializePositional(positional, flag) {
      switch (flag) {
        case "s":
          return positional;
        case "d":
        case "i":
          return Number(positional);
        case "j":
          return JSON.stringify(positional);
        case "o": {
          if (typeof positional === "string") {
            return positional;
          }
          const json = JSON.stringify(positional);
          if (json === "{}" || json === "[]" || /^\[object .+?\]$/.test(json)) {
            return positional;
          }
          return json;
        }
      }
    }
    function format(message, ...positionals) {
      if (positionals.length === 0) {
        return message;
      }
      let positionalIndex = 0;
      let formattedMessage = message.replace(
        POSITIONALS_EXP,
        (match, isEscaped, _, flag) => {
          const positional = positionals[positionalIndex];
          const value = serializePositional(positional, flag);
          if (!isEscaped) {
            positionalIndex++;
            return value;
          }
          return match;
        }
      );
      if (positionalIndex < positionals.length) {
        formattedMessage += ` ${positionals.slice(positionalIndex).join(" ")}`;
      }
      formattedMessage = formattedMessage.replace(/%{2,2}/g, "%");
      return formattedMessage;
    }
    var STACK_FRAMES_TO_IGNORE = 2;
    function cleanErrorStack(error) {
      if (!error.stack) {
        return;
      }
      const nextStack = error.stack.split("\n");
      nextStack.splice(1, STACK_FRAMES_TO_IGNORE);
      error.stack = nextStack.join("\n");
    }
    var InvariantError = class extends Error {
      constructor(message, ...positionals) {
        super(message);
        this.message = message;
        this.name = "Invariant Violation";
        this.message = format(message, ...positionals);
        cleanErrorStack(this);
      }
    };
    var invariant = (predicate, message, ...positionals) => {
      if (!predicate) {
        throw new InvariantError(message, ...positionals);
      }
    };
    invariant.as = (ErrorConstructor, predicate, message, ...positionals) => {
      if (!predicate) {
        const formatMessage = positionals.length === 0 ? message : format(message, positionals);
        let error;
        try {
          error = Reflect.construct(ErrorConstructor, [formatMessage]);
        } catch (err) {
          error = ErrorConstructor(formatMessage);
        }
        throw error;
      }
    };
  }
});

// node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/internal/devUtils.js
var require_devUtils = __commonJS({
  "node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/internal/devUtils.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var devUtils_exports = {};
    __export(devUtils_exports, {
      devUtils: () => devUtils
    });
    module.exports = __toCommonJS(devUtils_exports);
    var import_outvariant = require_lib();
    var LIBRARY_PREFIX = "[MSW]";
    function formatMessage(message, ...positionals) {
      const interpolatedMessage = (0, import_outvariant.format)(message, ...positionals);
      return `${LIBRARY_PREFIX} ${interpolatedMessage}`;
    }
    function warn(message, ...positionals) {
      console.warn(formatMessage(message, ...positionals));
    }
    function error(message, ...positionals) {
      console.error(formatMessage(message, ...positionals));
    }
    var devUtils = {
      formatMessage,
      warn,
      error
    };
  }
});

// node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/internal/getCallFrame.js
var require_getCallFrame = __commonJS({
  "node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/internal/getCallFrame.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var getCallFrame_exports = {};
    __export(getCallFrame_exports, {
      getCallFrame: () => getCallFrame
    });
    module.exports = __toCommonJS(getCallFrame_exports);
    var SOURCE_FRAME = /[\/\\]msw[\/\\]src[\/\\](.+)/;
    var BUILD_FRAME = /(node_modules)?[\/\\]lib[\/\\](core|browser|node|native|iife)[\/\\]|^[^\/\\]*$/;
    function getCallFrame(error) {
      const stack = error.stack;
      if (!stack) {
        return;
      }
      const frames = stack.split("\n").slice(1);
      const declarationFrame = frames.find((frame) => {
        return !(SOURCE_FRAME.test(frame) || BUILD_FRAME.test(frame));
      });
      if (!declarationFrame) {
        return;
      }
      const declarationPath = declarationFrame.replace(/\s*at [^()]*\(([^)]+)\)/, "$1").replace(/^@/, "");
      return declarationPath;
    }
  }
});

// node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/internal/isIterable.js
var require_isIterable = __commonJS({
  "node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/internal/isIterable.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var isIterable_exports = {};
    __export(isIterable_exports, {
      isIterable: () => isIterable
    });
    module.exports = __toCommonJS(isIterable_exports);
    function isIterable(fn) {
      if (!fn) {
        return false;
      }
      return typeof fn[Symbol.iterator] == "function";
    }
  }
});

// node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/handlers/RequestHandler.js
var require_RequestHandler = __commonJS({
  "node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/handlers/RequestHandler.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var RequestHandler_exports = {};
    __export(RequestHandler_exports, {
      RequestHandler: () => RequestHandler
    });
    module.exports = __toCommonJS(RequestHandler_exports);
    var import_outvariant = require_lib();
    var import_getCallFrame = require_getCallFrame();
    var import_isIterable = require_isIterable();
    var _RequestHandler = class _RequestHandler {
      constructor(args) {
        __publicField(this, "info");
        /**
         * Indicates whether this request handler has been used
         * (its resolver has successfully executed).
         */
        __publicField(this, "isUsed");
        __publicField(this, "resolver");
        __publicField(this, "resolverGenerator");
        __publicField(this, "resolverGeneratorResult");
        __publicField(this, "options");
        this.resolver = args.resolver;
        this.options = args.options;
        const callFrame = (0, import_getCallFrame.getCallFrame)(new Error());
        this.info = {
          ...args.info,
          callFrame
        };
        this.isUsed = false;
      }
      /**
       * Parse the intercepted request to extract additional information from it.
       * Parsed result is then exposed to other methods of this request handler.
       */
      async parse(_args) {
        return {};
      }
      /**
       * Test if this handler matches the given request.
       *
       * This method is not used internally but is exposed
       * as a convenience method for consumers writing custom
       * handlers.
       */
      async test(args) {
        const parsedResult = await this.parse({
          request: args.request,
          resolutionContext: args.resolutionContext
        });
        return this.predicate({
          request: args.request,
          parsedResult,
          resolutionContext: args.resolutionContext
        });
      }
      extendResolverArgs(_args) {
        return {};
      }
      // Clone the request instance before it's passed to the handler phases
      // and the response resolver so we can always read it for logging.
      // We only clone it once per request to avoid unnecessary overhead.
      cloneRequestOrGetFromCache(request) {
        const existingClone = _RequestHandler.cache.get(request);
        if (typeof existingClone !== "undefined") {
          return existingClone;
        }
        const clonedRequest = request.clone();
        _RequestHandler.cache.set(request, clonedRequest);
        return clonedRequest;
      }
      /**
       * Execute this request handler and produce a mocked response
       * using the given resolver function.
       */
      async run(args) {
        var _a, _b;
        if (this.isUsed && ((_a = this.options) == null ? void 0 : _a.once)) {
          return null;
        }
        const requestClone = this.cloneRequestOrGetFromCache(args.request);
        const parsedResult = await this.parse({
          request: args.request,
          resolutionContext: args.resolutionContext
        });
        const shouldInterceptRequest = this.predicate({
          request: args.request,
          parsedResult,
          resolutionContext: args.resolutionContext
        });
        if (!shouldInterceptRequest) {
          return null;
        }
        if (this.isUsed && ((_b = this.options) == null ? void 0 : _b.once)) {
          return null;
        }
        this.isUsed = true;
        const executeResolver = this.wrapResolver(this.resolver);
        const resolverExtras = this.extendResolverArgs({
          request: args.request,
          parsedResult
        });
        const mockedResponsePromise = executeResolver({
          ...resolverExtras,
          requestId: args.requestId,
          request: args.request
        }).catch((errorOrResponse) => {
          if (errorOrResponse instanceof Response) {
            return errorOrResponse;
          }
          throw errorOrResponse;
        });
        const mockedResponse = await mockedResponsePromise;
        const executionResult = this.createExecutionResult({
          // Pass the cloned request to the result so that logging
          // and other consumers could read its body once more.
          request: requestClone,
          requestId: args.requestId,
          response: mockedResponse,
          parsedResult
        });
        return executionResult;
      }
      wrapResolver(resolver) {
        return async (info) => {
          const result = this.resolverGenerator || await resolver(info);
          if ((0, import_isIterable.isIterable)(result)) {
            this.isUsed = false;
            const { value, done } = result[Symbol.iterator]().next();
            const nextResponse = await value;
            if (done) {
              this.isUsed = true;
            }
            if (!nextResponse && done) {
              (0, import_outvariant.invariant)(
                this.resolverGeneratorResult,
                "Failed to returned a previously stored generator response: the value is not a valid Response."
              );
              return this.resolverGeneratorResult.clone();
            }
            if (!this.resolverGenerator) {
              this.resolverGenerator = result;
            }
            if (nextResponse) {
              this.resolverGeneratorResult = nextResponse == null ? void 0 : nextResponse.clone();
            }
            return nextResponse;
          }
          return result;
        };
      }
      createExecutionResult(args) {
        return {
          handler: this,
          request: args.request,
          requestId: args.requestId,
          response: args.response,
          parsedResult: args.parsedResult
        };
      }
    };
    __publicField(_RequestHandler, "cache", /* @__PURE__ */ new WeakMap());
    var RequestHandler = _RequestHandler;
  }
});

// node_modules/.pnpm/@open-draft+until@2.1.0/node_modules/@open-draft/until/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/.pnpm/@open-draft+until@2.1.0/node_modules/@open-draft/until/lib/index.js"(exports, module) {
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export(src_exports, {
      until: () => until
    });
    module.exports = __toCommonJS(src_exports);
    var until = async (promise) => {
      try {
        const data = await promise().catch((error) => {
          throw error;
        });
        return { error: null, data };
      } catch (error) {
        return { error, data: null };
      }
    };
  }
});

// node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/executeHandlers.js
var require_executeHandlers = __commonJS({
  "node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/executeHandlers.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var executeHandlers_exports = {};
    __export(executeHandlers_exports, {
      executeHandlers: () => executeHandlers
    });
    module.exports = __toCommonJS(executeHandlers_exports);
    var executeHandlers = async ({
      request,
      requestId,
      handlers,
      resolutionContext
    }) => {
      let matchingHandler = null;
      let result = null;
      for (const handler of handlers) {
        result = await handler.run({ request, requestId, resolutionContext });
        if (result !== null) {
          matchingHandler = handler;
        }
        if (result == null ? void 0 : result.response) {
          break;
        }
      }
      if (matchingHandler) {
        return {
          handler: matchingHandler,
          parsedResult: result == null ? void 0 : result.parsedResult,
          response: result == null ? void 0 : result.response
        };
      }
      return null;
    };
  }
});

// node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/request/toPublicUrl.js
var require_toPublicUrl = __commonJS({
  "node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/request/toPublicUrl.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var toPublicUrl_exports = {};
    __export(toPublicUrl_exports, {
      toPublicUrl: () => toPublicUrl
    });
    module.exports = __toCommonJS(toPublicUrl_exports);
    function toPublicUrl(url) {
      if (typeof location === "undefined") {
        return url.toString();
      }
      const urlInstance = url instanceof URL ? url : new URL(url);
      return urlInstance.origin === location.origin ? urlInstance.pathname : urlInstance.origin + urlInstance.pathname;
    }
  }
});

// node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/request/onUnhandledRequest.js
var require_onUnhandledRequest = __commonJS({
  "node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/request/onUnhandledRequest.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var onUnhandledRequest_exports = {};
    __export(onUnhandledRequest_exports, {
      onUnhandledRequest: () => onUnhandledRequest
    });
    module.exports = __toCommonJS(onUnhandledRequest_exports);
    var import_toPublicUrl = require_toPublicUrl();
    var import_devUtils = require_devUtils();
    async function onUnhandledRequest(request, strategy = "warn") {
      const url = new URL(request.url);
      const publicUrl = (0, import_toPublicUrl.toPublicUrl)(url) + url.search;
      const unhandledRequestMessage = `intercepted a request without a matching request handler:

  • ${request.method} ${publicUrl}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks`;
      function applyStrategy(strategy2) {
        switch (strategy2) {
          case "error": {
            import_devUtils.devUtils.error("Error: %s", unhandledRequestMessage);
            throw new Error(
              import_devUtils.devUtils.formatMessage(
                'Cannot bypass a request when using the "error" strategy for the "onUnhandledRequest" option.'
              )
            );
          }
          case "warn": {
            import_devUtils.devUtils.warn("Warning: %s", unhandledRequestMessage);
            break;
          }
          case "bypass":
            break;
          default:
            throw new Error(
              import_devUtils.devUtils.formatMessage(
                'Failed to react to an unhandled request: unknown strategy "%s". Please provide one of the supported strategies ("bypass", "warn", "error") or a custom callback function as the value of the "onUnhandledRequest" option.',
                strategy2
              )
            );
        }
      }
      if (typeof strategy === "function") {
        strategy(request, {
          warning: applyStrategy.bind(null, "warn"),
          error: applyStrategy.bind(null, "error")
        });
        return;
      }
      if (url.protocol === "file:") {
        return;
      }
      applyStrategy(strategy);
    }
  }
});

// node_modules/.pnpm/@mswjs+cookies@1.1.0/node_modules/@mswjs/cookies/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/.pnpm/@mswjs+cookies@1.1.0/node_modules/@mswjs/cookies/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __commonJS2 = (cb, mod) => function __require() {
      return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var require_set_cookie = __commonJS2({
      "node_modules/set-cookie-parser/lib/set-cookie.js"(exports2, module2) {
        "use strict";
        var defaultParseOptions = {
          decodeValues: true,
          map: false,
          silent: false
        };
        function isNonEmptyString(str) {
          return typeof str === "string" && !!str.trim();
        }
        function parseString(setCookieValue, options) {
          var parts = setCookieValue.split(";").filter(isNonEmptyString);
          var nameValuePairStr = parts.shift();
          var parsed = parseNameValuePair(nameValuePairStr);
          var name = parsed.name;
          var value = parsed.value;
          options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;
          try {
            value = options.decodeValues ? decodeURIComponent(value) : value;
          } catch (e) {
            console.error(
              "set-cookie-parser encountered an error while decoding a cookie with value '" + value + "'. Set options.decodeValues to false to disable this feature.",
              e
            );
          }
          var cookie = {
            name,
            value
          };
          parts.forEach(function(part) {
            var sides = part.split("=");
            var key = sides.shift().trimLeft().toLowerCase();
            var value2 = sides.join("=");
            if (key === "expires") {
              cookie.expires = new Date(value2);
            } else if (key === "max-age") {
              cookie.maxAge = parseInt(value2, 10);
            } else if (key === "secure") {
              cookie.secure = true;
            } else if (key === "httponly") {
              cookie.httpOnly = true;
            } else if (key === "samesite") {
              cookie.sameSite = value2;
            } else {
              cookie[key] = value2;
            }
          });
          return cookie;
        }
        function parseNameValuePair(nameValuePairStr) {
          var name = "";
          var value = "";
          var nameValueArr = nameValuePairStr.split("=");
          if (nameValueArr.length > 1) {
            name = nameValueArr.shift();
            value = nameValueArr.join("=");
          } else {
            value = nameValuePairStr;
          }
          return { name, value };
        }
        function parse(input, options) {
          options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;
          if (!input) {
            if (!options.map) {
              return [];
            } else {
              return {};
            }
          }
          if (input.headers) {
            if (typeof input.headers.getSetCookie === "function") {
              input = input.headers.getSetCookie();
            } else if (input.headers["set-cookie"]) {
              input = input.headers["set-cookie"];
            } else {
              var sch = input.headers[Object.keys(input.headers).find(function(key) {
                return key.toLowerCase() === "set-cookie";
              })];
              if (!sch && input.headers.cookie && !options.silent) {
                console.warn(
                  "Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."
                );
              }
              input = sch;
            }
          }
          if (!Array.isArray(input)) {
            input = [input];
          }
          options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;
          if (!options.map) {
            return input.filter(isNonEmptyString).map(function(str) {
              return parseString(str, options);
            });
          } else {
            var cookies = {};
            return input.filter(isNonEmptyString).reduce(function(cookies2, str) {
              var cookie = parseString(str, options);
              cookies2[cookie.name] = cookie;
              return cookies2;
            }, cookies);
          }
        }
        function splitCookiesString(cookiesString) {
          if (Array.isArray(cookiesString)) {
            return cookiesString;
          }
          if (typeof cookiesString !== "string") {
            return [];
          }
          var cookiesStrings = [];
          var pos = 0;
          var start;
          var ch;
          var lastComma;
          var nextStart;
          var cookiesSeparatorFound;
          function skipWhitespace() {
            while (pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos))) {
              pos += 1;
            }
            return pos < cookiesString.length;
          }
          function notSpecialChar() {
            ch = cookiesString.charAt(pos);
            return ch !== "=" && ch !== ";" && ch !== ",";
          }
          while (pos < cookiesString.length) {
            start = pos;
            cookiesSeparatorFound = false;
            while (skipWhitespace()) {
              ch = cookiesString.charAt(pos);
              if (ch === ",") {
                lastComma = pos;
                pos += 1;
                skipWhitespace();
                nextStart = pos;
                while (pos < cookiesString.length && notSpecialChar()) {
                  pos += 1;
                }
                if (pos < cookiesString.length && cookiesString.charAt(pos) === "=") {
                  cookiesSeparatorFound = true;
                  pos = nextStart;
                  cookiesStrings.push(cookiesString.substring(start, lastComma));
                  start = pos;
                } else {
                  pos = lastComma + 1;
                }
              } else {
                pos += 1;
              }
            }
            if (!cookiesSeparatorFound || pos >= cookiesString.length) {
              cookiesStrings.push(cookiesString.substring(start, cookiesString.length));
            }
          }
          return cookiesStrings;
        }
        module2.exports = parse;
        module2.exports.parse = parse;
        module2.exports.parseString = parseString;
        module2.exports.splitCookiesString = splitCookiesString;
      }
    });
    var import_set_cookie_parser = __toESM(require_set_cookie());
    var PERSISTENCY_KEY = "MSW_COOKIE_STORE";
    function supportsLocalStorage() {
      try {
        if (localStorage == null) {
          return false;
        }
        const testKey = PERSISTENCY_KEY + "_test";
        localStorage.setItem(testKey, "test");
        localStorage.getItem(testKey);
        localStorage.removeItem(testKey);
        return true;
      } catch (error) {
        return false;
      }
    }
    function isPropertyAccessible(object, method) {
      try {
        object[method];
        return true;
      } catch (e2) {
        return false;
      }
    }
    var CookieStore = class {
      constructor() {
        this.store = /* @__PURE__ */ new Map();
      }
      add(request, response) {
        if (isPropertyAccessible(request, "credentials") && request.credentials === "omit") {
          return;
        }
        const requestUrl = new URL(request.url);
        const responseCookies = response.headers.get("set-cookie");
        if (!responseCookies) {
          return;
        }
        const now = Date.now();
        const parsedResponseCookies = (0, import_set_cookie_parser.parse)(responseCookies).map(
          ({ maxAge, ...cookie }) => ({
            ...cookie,
            expires: maxAge === void 0 ? cookie.expires : new Date(now + maxAge * 1e3),
            maxAge
          })
        );
        const prevCookies = this.store.get(requestUrl.origin) || /* @__PURE__ */ new Map();
        parsedResponseCookies.forEach((cookie) => {
          this.store.set(requestUrl.origin, prevCookies.set(cookie.name, cookie));
        });
      }
      get(request) {
        this.deleteExpiredCookies();
        const requestUrl = new URL(request.url);
        const originCookies = this.store.get(requestUrl.origin) || /* @__PURE__ */ new Map();
        if (!isPropertyAccessible(request, "credentials")) {
          return originCookies;
        }
        switch (request.credentials) {
          case "include": {
            if (typeof document === "undefined") {
              return originCookies;
            }
            const documentCookies = (0, import_set_cookie_parser.parse)(document.cookie);
            documentCookies.forEach((cookie) => {
              originCookies.set(cookie.name, cookie);
            });
            return originCookies;
          }
          case "same-origin": {
            return originCookies;
          }
          default:
            return /* @__PURE__ */ new Map();
        }
      }
      getAll() {
        this.deleteExpiredCookies();
        return this.store;
      }
      deleteAll(request) {
        const requestUrl = new URL(request.url);
        this.store.delete(requestUrl.origin);
      }
      clear() {
        this.store.clear();
      }
      hydrate() {
        if (!supportsLocalStorage()) {
          return;
        }
        const persistedCookies = localStorage.getItem(PERSISTENCY_KEY);
        if (!persistedCookies) {
          return;
        }
        try {
          const parsedCookies = JSON.parse(persistedCookies);
          parsedCookies.forEach(([origin, cookies]) => {
            this.store.set(
              origin,
              new Map(
                cookies.map(([token, { expires, ...cookie }]) => [
                  token,
                  expires === void 0 ? cookie : { ...cookie, expires: new Date(expires) }
                ])
              )
            );
          });
        } catch (error) {
          console.warn(`
[virtual-cookie] Failed to parse a stored cookie from the localStorage (key "${PERSISTENCY_KEY}").

Stored value:
${localStorage.getItem(PERSISTENCY_KEY)}

Thrown exception:
${error}

Invalid value has been removed from localStorage to prevent subsequent failed parsing attempts.`);
          localStorage.removeItem(PERSISTENCY_KEY);
        }
      }
      persist() {
        if (!supportsLocalStorage()) {
          return;
        }
        const serializedCookies = Array.from(this.store.entries()).map(
          ([origin, cookies]) => {
            return [origin, Array.from(cookies.entries())];
          }
        );
        localStorage.setItem(PERSISTENCY_KEY, JSON.stringify(serializedCookies));
      }
      deleteExpiredCookies() {
        const now = Date.now();
        this.store.forEach((originCookies, origin) => {
          originCookies.forEach(({ expires, name }) => {
            if (expires !== void 0 && expires.getTime() <= now) {
              originCookies.delete(name);
            }
          });
          if (originCookies.size === 0) {
            this.store.delete(origin);
          }
        });
      }
    };
    var store = new CookieStore();
    exports.PERSISTENCY_KEY = PERSISTENCY_KEY;
    exports.store = store;
  }
});

// node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/request/readResponseCookies.js
var require_readResponseCookies = __commonJS({
  "node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/request/readResponseCookies.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var readResponseCookies_exports = {};
    __export(readResponseCookies_exports, {
      readResponseCookies: () => readResponseCookies
    });
    module.exports = __toCommonJS(readResponseCookies_exports);
    var import_cookies = require_lib3();
    function readResponseCookies(request, response) {
      import_cookies.store.add({ ...request, url: request.url.toString() }, response);
      import_cookies.store.persist();
    }
  }
});

// node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/handleRequest.js
var require_handleRequest = __commonJS({
  "node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/handleRequest.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var handleRequest_exports = {};
    __export(handleRequest_exports, {
      handleRequest: () => handleRequest
    });
    module.exports = __toCommonJS(handleRequest_exports);
    var import_until = require_lib2();
    var import_executeHandlers = require_executeHandlers();
    var import_onUnhandledRequest = require_onUnhandledRequest();
    var import_readResponseCookies = require_readResponseCookies();
    async function handleRequest(request, requestId, handlers, options, emitter, handleRequestOptions) {
      var _a, _b, _c, _d, _e, _f;
      emitter.emit("request:start", { request, requestId });
      if (request.headers.get("x-msw-intention") === "bypass") {
        emitter.emit("request:end", { request, requestId });
        (_a = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _a.call(handleRequestOptions, request);
        return;
      }
      const lookupResult = await (0, import_until.until)(() => {
        return (0, import_executeHandlers.executeHandlers)({
          request,
          requestId,
          handlers,
          resolutionContext: handleRequestOptions == null ? void 0 : handleRequestOptions.resolutionContext
        });
      });
      if (lookupResult.error) {
        emitter.emit("unhandledException", {
          error: lookupResult.error,
          request,
          requestId
        });
        throw lookupResult.error;
      }
      if (!lookupResult.data) {
        await (0, import_onUnhandledRequest.onUnhandledRequest)(request, options.onUnhandledRequest);
        emitter.emit("request:unhandled", { request, requestId });
        emitter.emit("request:end", { request, requestId });
        (_b = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _b.call(handleRequestOptions, request);
        return;
      }
      const { response } = lookupResult.data;
      if (!response) {
        emitter.emit("request:end", { request, requestId });
        (_c = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _c.call(handleRequestOptions, request);
        return;
      }
      if (response.status === 302 && response.headers.get("x-msw-intention") === "passthrough") {
        emitter.emit("request:end", { request, requestId });
        (_d = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _d.call(handleRequestOptions, request);
        return;
      }
      (0, import_readResponseCookies.readResponseCookies)(request, response);
      emitter.emit("request:match", { request, requestId });
      const requiredLookupResult = lookupResult.data;
      const transformedResponse = ((_e = handleRequestOptions == null ? void 0 : handleRequestOptions.transformResponse) == null ? void 0 : _e.call(handleRequestOptions, response)) || response;
      (_f = handleRequestOptions == null ? void 0 : handleRequestOptions.onMockedResponse) == null ? void 0 : _f.call(
        handleRequestOptions,
        transformedResponse,
        requiredLookupResult
      );
      emitter.emit("request:end", { request, requestId });
      return transformedResponse;
    }
  }
});

// node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/toResponseInit.js
var require_toResponseInit = __commonJS({
  "node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/toResponseInit.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var toResponseInit_exports = {};
    __export(toResponseInit_exports, {
      toResponseInit: () => toResponseInit
    });
    module.exports = __toCommonJS(toResponseInit_exports);
    function toResponseInit(response) {
      return {
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries())
      };
    }
  }
});

// node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/internal/isObject.js
var require_isObject = __commonJS({
  "node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/internal/isObject.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var isObject_exports = {};
    __export(isObject_exports, {
      isObject: () => isObject
    });
    module.exports = __toCommonJS(isObject_exports);
    function isObject(value) {
      return value != null && typeof value === "object" && !Array.isArray(value);
    }
  }
});

// node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/internal/mergeRight.js
var require_mergeRight = __commonJS({
  "node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/internal/mergeRight.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var mergeRight_exports = {};
    __export(mergeRight_exports, {
      mergeRight: () => mergeRight
    });
    module.exports = __toCommonJS(mergeRight_exports);
    var import_isObject = require_isObject();
    function mergeRight(left, right) {
      return Object.entries(right).reduce(
        (result, [key, rightValue]) => {
          const leftValue = result[key];
          if (Array.isArray(leftValue) && Array.isArray(rightValue)) {
            result[key] = leftValue.concat(rightValue);
            return result;
          }
          if ((0, import_isObject.isObject)(leftValue) && (0, import_isObject.isObject)(rightValue)) {
            result[key] = mergeRight(leftValue, rightValue);
            return result;
          }
          result[key] = rightValue;
          return result;
        },
        Object.assign({}, left)
      );
    }
  }
});

// node_modules/.pnpm/strict-event-emitter@0.5.1/node_modules/strict-event-emitter/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/.pnpm/strict-event-emitter@0.5.1/node_modules/strict-event-emitter/lib/index.js"(exports, module) {
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export(src_exports, {
      Emitter: () => Emitter,
      MemoryLeakError: () => MemoryLeakError
    });
    module.exports = __toCommonJS(src_exports);
    var MemoryLeakError = class extends Error {
      constructor(emitter, type, count) {
        super(
          `Possible EventEmitter memory leak detected. ${count} ${type.toString()} listeners added. Use emitter.setMaxListeners() to increase limit`
        );
        this.emitter = emitter;
        this.type = type;
        this.count = count;
        this.name = "MaxListenersExceededWarning";
      }
    };
    var _Emitter = class {
      static listenerCount(emitter, eventName) {
        return emitter.listenerCount(eventName);
      }
      constructor() {
        this.events = /* @__PURE__ */ new Map();
        this.maxListeners = _Emitter.defaultMaxListeners;
        this.hasWarnedAboutPotentialMemoryLeak = false;
      }
      _emitInternalEvent(internalEventName, eventName, listener) {
        this.emit(
          internalEventName,
          ...[eventName, listener]
        );
      }
      _getListeners(eventName) {
        return Array.prototype.concat.apply([], this.events.get(eventName)) || [];
      }
      _removeListener(listeners, listener) {
        const index = listeners.indexOf(listener);
        if (index > -1) {
          listeners.splice(index, 1);
        }
        return [];
      }
      _wrapOnceListener(eventName, listener) {
        const onceListener = (...data) => {
          this.removeListener(eventName, onceListener);
          return listener.apply(this, data);
        };
        Object.defineProperty(onceListener, "name", { value: listener.name });
        return onceListener;
      }
      setMaxListeners(maxListeners) {
        this.maxListeners = maxListeners;
        return this;
      }
      /**
       * Returns the current max listener value for the `Emitter` which is
       * either set by `emitter.setMaxListeners(n)` or defaults to
       * `Emitter.defaultMaxListeners`.
       */
      getMaxListeners() {
        return this.maxListeners;
      }
      /**
       * Returns an array listing the events for which the emitter has registered listeners.
       * The values in the array will be strings or Symbols.
       */
      eventNames() {
        return Array.from(this.events.keys());
      }
      /**
       * Synchronously calls each of the listeners registered for the event named `eventName`,
       * in the order they were registered, passing the supplied arguments to each.
       * Returns `true` if the event has listeners, `false` otherwise.
       *
       * @example
       * const emitter = new Emitter<{ hello: [string] }>()
       * emitter.emit('hello', 'John')
       */
      emit(eventName, ...data) {
        const listeners = this._getListeners(eventName);
        listeners.forEach((listener) => {
          listener.apply(this, data);
        });
        return listeners.length > 0;
      }
      addListener(eventName, listener) {
        this._emitInternalEvent("newListener", eventName, listener);
        const nextListeners = this._getListeners(eventName).concat(listener);
        this.events.set(eventName, nextListeners);
        if (this.maxListeners > 0 && this.listenerCount(eventName) > this.maxListeners && !this.hasWarnedAboutPotentialMemoryLeak) {
          this.hasWarnedAboutPotentialMemoryLeak = true;
          const memoryLeakWarning = new MemoryLeakError(
            this,
            eventName,
            this.listenerCount(eventName)
          );
          console.warn(memoryLeakWarning);
        }
        return this;
      }
      on(eventName, listener) {
        return this.addListener(eventName, listener);
      }
      once(eventName, listener) {
        return this.addListener(
          eventName,
          this._wrapOnceListener(eventName, listener)
        );
      }
      prependListener(eventName, listener) {
        const listeners = this._getListeners(eventName);
        if (listeners.length > 0) {
          const nextListeners = [listener].concat(listeners);
          this.events.set(eventName, nextListeners);
        } else {
          this.events.set(eventName, listeners.concat(listener));
        }
        return this;
      }
      prependOnceListener(eventName, listener) {
        return this.prependListener(
          eventName,
          this._wrapOnceListener(eventName, listener)
        );
      }
      removeListener(eventName, listener) {
        const listeners = this._getListeners(eventName);
        if (listeners.length > 0) {
          this._removeListener(listeners, listener);
          this.events.set(eventName, listeners);
          this._emitInternalEvent("removeListener", eventName, listener);
        }
        return this;
      }
      /**
       * Alias for `emitter.removeListener()`.
       *
       * @example
       * emitter.off('hello', listener)
       */
      off(eventName, listener) {
        return this.removeListener(eventName, listener);
      }
      removeAllListeners(eventName) {
        if (eventName) {
          this.events.delete(eventName);
        } else {
          this.events.clear();
        }
        return this;
      }
      /**
       * Returns a copy of the array of listeners for the event named `eventName`.
       */
      listeners(eventName) {
        return Array.from(this._getListeners(eventName));
      }
      /**
       * Returns the number of listeners listening to the event named `eventName`.
       */
      listenerCount(eventName) {
        return this._getListeners(eventName).length;
      }
      rawListeners(eventName) {
        return this.listeners(eventName);
      }
    };
    var Emitter = _Emitter;
    Emitter.defaultMaxListeners = 10;
  }
});

// node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/internal/pipeEvents.js
var require_pipeEvents = __commonJS({
  "node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/internal/pipeEvents.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var pipeEvents_exports = {};
    __export(pipeEvents_exports, {
      pipeEvents: () => pipeEvents
    });
    module.exports = __toCommonJS(pipeEvents_exports);
    function pipeEvents(source, destination) {
      const rawEmit = source.emit;
      if (rawEmit._isPiped) {
        return;
      }
      const sourceEmit = function sourceEmit2(event, ...data) {
        destination.emit(event, ...data);
        return rawEmit.call(this, event, ...data);
      };
      sourceEmit._isPiped = true;
      source.emit = sourceEmit;
    }
  }
});

// node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/internal/toReadonlyArray.js
var require_toReadonlyArray = __commonJS({
  "node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/internal/toReadonlyArray.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var toReadonlyArray_exports = {};
    __export(toReadonlyArray_exports, {
      toReadonlyArray: () => toReadonlyArray
    });
    module.exports = __toCommonJS(toReadonlyArray_exports);
    function toReadonlyArray(source) {
      const clone = [...source];
      Object.freeze(clone);
      return clone;
    }
  }
});

// node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/internal/Disposable.js
var require_Disposable = __commonJS({
  "node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/utils/internal/Disposable.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var Disposable_exports = {};
    __export(Disposable_exports, {
      Disposable: () => Disposable
    });
    module.exports = __toCommonJS(Disposable_exports);
    var Disposable = class {
      constructor() {
        __publicField(this, "subscriptions", []);
      }
      async dispose() {
        await Promise.all(this.subscriptions.map((subscription) => subscription()));
      }
    };
  }
});

// node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/SetupApi.js
var require_SetupApi = __commonJS({
  "node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/core/SetupApi.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var SetupApi_exports = {};
    __export(SetupApi_exports, {
      HandlersController: () => HandlersController,
      InMemoryHandlersController: () => InMemoryHandlersController,
      SetupApi: () => SetupApi
    });
    module.exports = __toCommonJS(SetupApi_exports);
    var import_outvariant = require_lib();
    var import_strict_event_emitter = require_lib4();
    var import_devUtils = require_devUtils();
    var import_pipeEvents = require_pipeEvents();
    var import_toReadonlyArray = require_toReadonlyArray();
    var import_Disposable = require_Disposable();
    var HandlersController = class {
    };
    var InMemoryHandlersController = class {
      constructor(initialHandlers) {
        __publicField(this, "handlers");
        this.initialHandlers = initialHandlers;
        this.handlers = [...initialHandlers];
      }
      prepend(runtimeHandles) {
        this.handlers.unshift(...runtimeHandles);
      }
      reset(nextHandlers) {
        this.handlers = nextHandlers.length > 0 ? [...nextHandlers] : [...this.initialHandlers];
      }
      currentHandlers() {
        return this.handlers;
      }
    };
    var SetupApi = class extends import_Disposable.Disposable {
      constructor(...initialHandlers) {
        super();
        __publicField(this, "handlersController");
        __publicField(this, "emitter");
        __publicField(this, "publicEmitter");
        __publicField(this, "events");
        (0, import_outvariant.invariant)(
          this.validateHandlers(initialHandlers),
          import_devUtils.devUtils.formatMessage(
            `Failed to apply given request handlers: invalid input. Did you forget to spread the request handlers Array?`
          )
        );
        this.handlersController = new InMemoryHandlersController(initialHandlers);
        this.emitter = new import_strict_event_emitter.Emitter();
        this.publicEmitter = new import_strict_event_emitter.Emitter();
        (0, import_pipeEvents.pipeEvents)(this.emitter, this.publicEmitter);
        this.events = this.createLifeCycleEvents();
        this.subscriptions.push(() => {
          this.emitter.removeAllListeners();
          this.publicEmitter.removeAllListeners();
        });
      }
      validateHandlers(handlers) {
        return handlers.every((handler) => !Array.isArray(handler));
      }
      use(...runtimeHandlers) {
        (0, import_outvariant.invariant)(
          this.validateHandlers(runtimeHandlers),
          import_devUtils.devUtils.formatMessage(
            `Failed to call "use()" with the given request handlers: invalid input. Did you forget to spread the array of request handlers?`
          )
        );
        this.handlersController.prepend(runtimeHandlers);
      }
      restoreHandlers() {
        this.handlersController.currentHandlers().forEach((handler) => {
          handler.isUsed = false;
        });
      }
      resetHandlers(...nextHandlers) {
        this.handlersController.reset(nextHandlers);
      }
      listHandlers() {
        return (0, import_toReadonlyArray.toReadonlyArray)(this.handlersController.currentHandlers());
      }
      createLifeCycleEvents() {
        return {
          on: (...args) => {
            return this.publicEmitter.on(...args);
          },
          removeListener: (...args) => {
            return this.publicEmitter.removeListener(...args);
          },
          removeAllListeners: (...args) => {
            return this.publicEmitter.removeAllListeners(...args);
          }
        };
      }
    };
  }
});

// node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/browser/index.js
var require_browser = __commonJS({
  "node_modules/.pnpm/msw@2.2.14_typescript@5.4.5/node_modules/msw/lib/browser/index.js"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var browser_exports = {};
    __export(browser_exports, {
      SetupWorkerApi: () => SetupWorkerApi,
      setupWorker: () => setupWorker
    });
    module.exports = __toCommonJS(browser_exports);
    var POSITIONALS_EXP = /(%?)(%([sdijo]))/g;
    function serializePositional(positional, flag) {
      switch (flag) {
        case "s":
          return positional;
        case "d":
        case "i":
          return Number(positional);
        case "j":
          return JSON.stringify(positional);
        case "o": {
          if (typeof positional === "string") {
            return positional;
          }
          const json = JSON.stringify(positional);
          if (json === "{}" || json === "[]" || /^\[object .+?\]$/.test(json)) {
            return positional;
          }
          return json;
        }
      }
    }
    function format(message, ...positionals) {
      if (positionals.length === 0) {
        return message;
      }
      let positionalIndex = 0;
      let formattedMessage = message.replace(
        POSITIONALS_EXP,
        (match, isEscaped, _, flag) => {
          const positional = positionals[positionalIndex];
          const value = serializePositional(positional, flag);
          if (!isEscaped) {
            positionalIndex++;
            return value;
          }
          return match;
        }
      );
      if (positionalIndex < positionals.length) {
        formattedMessage += ` ${positionals.slice(positionalIndex).join(" ")}`;
      }
      formattedMessage = formattedMessage.replace(/%{2,2}/g, "%");
      return formattedMessage;
    }
    var STACK_FRAMES_TO_IGNORE = 2;
    function cleanErrorStack(error2) {
      if (!error2.stack) {
        return;
      }
      const nextStack = error2.stack.split("\n");
      nextStack.splice(1, STACK_FRAMES_TO_IGNORE);
      error2.stack = nextStack.join("\n");
    }
    var InvariantError = class extends Error {
      constructor(message, ...positionals) {
        super(message);
        this.message = message;
        this.name = "Invariant Violation";
        this.message = format(message, ...positionals);
        cleanErrorStack(this);
      }
    };
    var invariant = (predicate, message, ...positionals) => {
      if (!predicate) {
        throw new InvariantError(message, ...positionals);
      }
    };
    invariant.as = (ErrorConstructor, predicate, message, ...positionals) => {
      if (!predicate) {
        const formatMessage = positionals.length === 0 ? message : format(message, positionals);
        let error2;
        try {
          error2 = Reflect.construct(ErrorConstructor, [formatMessage]);
        } catch (err) {
          error2 = ErrorConstructor(formatMessage);
        }
        throw error2;
      }
    };
    function isNodeProcess() {
      if (typeof navigator !== "undefined" && navigator.product === "ReactNative") {
        return true;
      }
      if (typeof process !== "undefined") {
        const type = process.type;
        if (type === "renderer" || type === "worker") {
          return false;
        }
        return !!(process.versions && process.versions.node);
      }
      return false;
    }
    var import_devUtils7 = require_devUtils();
    var until = async (promise) => {
      try {
        const data = await promise().catch((error2) => {
          throw error2;
        });
        return { error: null, data };
      } catch (error2) {
        return { error: error2, data: null };
      }
    };
    var import_devUtils = require_devUtils();
    function getAbsoluteWorkerUrl(workerUrl) {
      return new URL(workerUrl, location.href).href;
    }
    function getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker) {
      const allStates = [
        registration.active,
        registration.installing,
        registration.waiting
      ];
      const relevantStates = allStates.filter((state) => {
        return state != null;
      });
      const worker = relevantStates.find((worker2) => {
        return findWorker(worker2.scriptURL, absoluteWorkerUrl);
      });
      return worker || null;
    }
    var getWorkerInstance = async (url, options = {}, findWorker) => {
      const absoluteWorkerUrl = getAbsoluteWorkerUrl(url);
      const mockRegistrations = await navigator.serviceWorker.getRegistrations().then(
        (registrations) => registrations.filter(
          (registration) => getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker)
        )
      );
      if (!navigator.serviceWorker.controller && mockRegistrations.length > 0) {
        location.reload();
      }
      const [existingRegistration] = mockRegistrations;
      if (existingRegistration) {
        return existingRegistration.update().then(() => {
          return [
            getWorkerByRegistration(
              existingRegistration,
              absoluteWorkerUrl,
              findWorker
            ),
            existingRegistration
          ];
        });
      }
      const registrationResult = await until(
        async () => {
          const registration = await navigator.serviceWorker.register(url, options);
          return [
            // Compare existing worker registration by its worker URL,
            // to prevent irrelevant workers to resolve here (such as Codesandbox worker).
            getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker),
            registration
          ];
        }
      );
      if (registrationResult.error) {
        const isWorkerMissing = registrationResult.error.message.includes("(404)");
        if (isWorkerMissing) {
          const scopeUrl = new URL((options == null ? void 0 : options.scope) || "/", location.href);
          throw new Error(
            import_devUtils.devUtils.formatMessage(`Failed to register a Service Worker for scope ('${scopeUrl.href}') with script ('${absoluteWorkerUrl}'): Service Worker script does not exist at the given path.

Did you forget to run "npx msw init <PUBLIC_DIR>"?

Learn more about creating the Service Worker script: https://mswjs.io/docs/cli/init`)
          );
        }
        throw new Error(
          import_devUtils.devUtils.formatMessage(
            "Failed to register the Service Worker:\n\n%s",
            registrationResult.error.message
          )
        );
      }
      return registrationResult.data;
    };
    var import_devUtils3 = require_devUtils();
    var import_devUtils2 = require_devUtils();
    function printStartMessage(args = {}) {
      if (args.quiet) {
        return;
      }
      const message = args.message || "Mocking enabled.";
      console.groupCollapsed(
        `%c${import_devUtils2.devUtils.formatMessage(message)}`,
        "color:orangered;font-weight:bold;"
      );
      console.log(
        "%cDocumentation: %chttps://mswjs.io/docs",
        "font-weight:bold",
        "font-weight:normal"
      );
      console.log("Found an issue? https://github.com/mswjs/msw/issues");
      if (args.workerUrl) {
        console.log("Worker script URL:", args.workerUrl);
      }
      if (args.workerScope) {
        console.log("Worker scope:", args.workerScope);
      }
      console.groupEnd();
    }
    async function enableMocking(context, options) {
      var _a2, _b;
      context.workerChannel.send("MOCK_ACTIVATE");
      await context.events.once("MOCKING_ENABLED");
      if (context.isMockingEnabled) {
        import_devUtils3.devUtils.warn(
          `Found a redundant "worker.start()" call. Note that starting the worker while mocking is already enabled will have no effect. Consider removing this "worker.start()" call.`
        );
        return;
      }
      context.isMockingEnabled = true;
      printStartMessage({
        quiet: options.quiet,
        workerScope: (_a2 = context.registration) == null ? void 0 : _a2.scope,
        workerUrl: (_b = context.worker) == null ? void 0 : _b.scriptURL
      });
    }
    var WorkerChannel = class {
      constructor(port) {
        this.port = port;
      }
      postMessage(event, ...rest) {
        const [data, transfer] = rest;
        this.port.postMessage({ type: event, data }, { transfer });
      }
    };
    function pruneGetRequestBody(request) {
      if (["HEAD", "GET"].includes(request.method)) {
        return void 0;
      }
      return request.body;
    }
    function parseWorkerRequest(incomingRequest) {
      return new Request(incomingRequest.url, {
        ...incomingRequest,
        body: pruneGetRequestBody(incomingRequest)
      });
    }
    var import_RequestHandler = require_RequestHandler();
    var import_handleRequest = require_handleRequest();
    var import_devUtils4 = require_devUtils();
    var import_toResponseInit = require_toResponseInit();
    var createRequestListener = (context, options) => {
      return async (event, message) => {
        const messageChannel = new WorkerChannel(event.ports[0]);
        const requestId = message.payload.id;
        const request = parseWorkerRequest(message.payload);
        const requestCloneForLogs = request.clone();
        const requestClone = request.clone();
        import_RequestHandler.RequestHandler.cache.set(request, requestClone);
        context.requests.set(requestId, requestClone);
        try {
          await (0, import_handleRequest.handleRequest)(
            request,
            requestId,
            context.getRequestHandlers(),
            options,
            context.emitter,
            {
              onPassthroughResponse() {
                messageChannel.postMessage("PASSTHROUGH");
              },
              async onMockedResponse(response, { handler, parsedResult }) {
                const responseClone = response.clone();
                const responseCloneForLogs = response.clone();
                const responseInit = (0, import_toResponseInit.toResponseInit)(response);
                if (context.supports.readableStreamTransfer) {
                  const responseStreamOrNull = response.body;
                  messageChannel.postMessage(
                    "MOCK_RESPONSE",
                    {
                      ...responseInit,
                      body: responseStreamOrNull
                    },
                    responseStreamOrNull ? [responseStreamOrNull] : void 0
                  );
                } else {
                  const responseBufferOrNull = response.body === null ? null : await responseClone.arrayBuffer();
                  messageChannel.postMessage("MOCK_RESPONSE", {
                    ...responseInit,
                    body: responseBufferOrNull
                  });
                }
                if (!options.quiet) {
                  context.emitter.once("response:mocked", () => {
                    handler.log({
                      request: requestCloneForLogs,
                      response: responseCloneForLogs,
                      parsedResult
                    });
                  });
                }
              }
            }
          );
        } catch (error2) {
          if (error2 instanceof Error) {
            import_devUtils4.devUtils.error(
              `Uncaught exception in the request handler for "%s %s":

%s

This exception has been gracefully handled as a 500 response, however, it's strongly recommended to resolve this error, as it indicates a mistake in your code. If you wish to mock an error response, please see this guide: https://mswjs.io/docs/recipes/mocking-error-responses`,
              request.method,
              request.url,
              error2.stack ?? error2
            );
            messageChannel.postMessage("MOCK_RESPONSE", {
              status: 500,
              statusText: "Request Handler Error",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                name: error2.name,
                message: error2.message,
                stack: error2.stack
              })
            });
          }
        }
      };
    };
    var import_devUtils5 = require_devUtils();
    async function checkWorkerIntegrity(context) {
      context.workerChannel.send("INTEGRITY_CHECK_REQUEST");
      const { payload } = await context.events.once("INTEGRITY_CHECK_RESPONSE");
      if (payload.checksum !== "26357c79639bfa20d64c0efca2a87423") {
        import_devUtils5.devUtils.warn(
          `The currently registered Service Worker has been generated by a different version of MSW (${payload.packageVersion}) and may not be fully compatible with the installed version.

It's recommended you update your worker script by running this command:

  • npx msw init <PUBLIC_DIR>

You can also automate this process and make the worker script update automatically upon the library installations. Read more: https://mswjs.io/docs/cli/init.`
        );
      }
    }
    var encoder = new TextEncoder();
    function encodeBuffer(text) {
      return encoder.encode(text);
    }
    function decodeBuffer(buffer, encoding) {
      const decoder = new TextDecoder(encoding);
      return decoder.decode(buffer);
    }
    function toArrayBuffer(array) {
      return array.buffer.slice(
        array.byteOffset,
        array.byteOffset + array.byteLength
      );
    }
    var RESPONSE_STATUS_CODES_WITHOUT_BODY = /* @__PURE__ */ new Set([
      101,
      103,
      204,
      205,
      304
    ]);
    function isResponseWithoutBody(status) {
      return RESPONSE_STATUS_CODES_WITHOUT_BODY.has(status);
    }
    var IS_PATCHED_MODULE = Symbol("isPatchedModule");
    var __defProp2 = Object.defineProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var colors_exports = {};
    __export2(colors_exports, {
      blue: () => blue,
      gray: () => gray,
      green: () => green,
      red: () => red,
      yellow: () => yellow
    });
    function yellow(text) {
      return `\x1B[33m${text}\x1B[0m`;
    }
    function blue(text) {
      return `\x1B[34m${text}\x1B[0m`;
    }
    function gray(text) {
      return `\x1B[90m${text}\x1B[0m`;
    }
    function red(text) {
      return `\x1B[31m${text}\x1B[0m`;
    }
    function green(text) {
      return `\x1B[32m${text}\x1B[0m`;
    }
    var IS_NODE = isNodeProcess();
    var Logger = class {
      constructor(name) {
        __publicField(this, "prefix");
        this.name = name;
        this.prefix = `[${this.name}]`;
        const LOGGER_NAME = getVariable("DEBUG");
        const LOGGER_LEVEL = getVariable("LOG_LEVEL");
        const isLoggingEnabled = LOGGER_NAME === "1" || LOGGER_NAME === "true" || typeof LOGGER_NAME !== "undefined" && this.name.startsWith(LOGGER_NAME);
        if (isLoggingEnabled) {
          this.debug = isDefinedAndNotEquals(LOGGER_LEVEL, "debug") ? noop : this.debug;
          this.info = isDefinedAndNotEquals(LOGGER_LEVEL, "info") ? noop : this.info;
          this.success = isDefinedAndNotEquals(LOGGER_LEVEL, "success") ? noop : this.success;
          this.warning = isDefinedAndNotEquals(LOGGER_LEVEL, "warning") ? noop : this.warning;
          this.error = isDefinedAndNotEquals(LOGGER_LEVEL, "error") ? noop : this.error;
        } else {
          this.info = noop;
          this.success = noop;
          this.warning = noop;
          this.error = noop;
          this.only = noop;
        }
      }
      extend(domain) {
        return new Logger(`${this.name}:${domain}`);
      }
      /**
       * Print a debug message.
       * @example
       * logger.debug('no duplicates found, creating a document...')
       */
      debug(message, ...positionals) {
        this.logEntry({
          level: "debug",
          message: gray(message),
          positionals,
          prefix: this.prefix,
          colors: {
            prefix: "gray"
          }
        });
      }
      /**
       * Print an info message.
       * @example
       * logger.info('start parsing...')
       */
      info(message, ...positionals) {
        this.logEntry({
          level: "info",
          message,
          positionals,
          prefix: this.prefix,
          colors: {
            prefix: "blue"
          }
        });
        const performance2 = new PerformanceEntry();
        return (message2, ...positionals2) => {
          performance2.measure();
          this.logEntry({
            level: "info",
            message: `${message2} ${gray(`${performance2.deltaTime}ms`)}`,
            positionals: positionals2,
            prefix: this.prefix,
            colors: {
              prefix: "blue"
            }
          });
        };
      }
      /**
       * Print a success message.
       * @example
       * logger.success('successfully created document')
       */
      success(message, ...positionals) {
        this.logEntry({
          level: "info",
          message,
          positionals,
          prefix: `✔ ${this.prefix}`,
          colors: {
            timestamp: "green",
            prefix: "green"
          }
        });
      }
      /**
       * Print a warning.
       * @example
       * logger.warning('found legacy document format')
       */
      warning(message, ...positionals) {
        this.logEntry({
          level: "warning",
          message,
          positionals,
          prefix: `⚠ ${this.prefix}`,
          colors: {
            timestamp: "yellow",
            prefix: "yellow"
          }
        });
      }
      /**
       * Print an error message.
       * @example
       * logger.error('something went wrong')
       */
      error(message, ...positionals) {
        this.logEntry({
          level: "error",
          message,
          positionals,
          prefix: `✖ ${this.prefix}`,
          colors: {
            timestamp: "red",
            prefix: "red"
          }
        });
      }
      /**
       * Execute the given callback only when the logging is enabled.
       * This is skipped in its entirety and has no runtime cost otherwise.
       * This executes regardless of the log level.
       * @example
       * logger.only(() => {
       *   logger.info('additional info')
       * })
       */
      only(callback) {
        callback();
      }
      createEntry(level, message) {
        return {
          timestamp: /* @__PURE__ */ new Date(),
          level,
          message
        };
      }
      logEntry(args) {
        const {
          level,
          message,
          prefix,
          colors: customColors,
          positionals = []
        } = args;
        const entry = this.createEntry(level, message);
        const timestampColor = (customColors == null ? void 0 : customColors.timestamp) || "gray";
        const prefixColor = (customColors == null ? void 0 : customColors.prefix) || "gray";
        const colorize = {
          timestamp: colors_exports[timestampColor],
          prefix: colors_exports[prefixColor]
        };
        const write = this.getWriter(level);
        write(
          [colorize.timestamp(this.formatTimestamp(entry.timestamp))].concat(prefix != null ? colorize.prefix(prefix) : []).concat(serializeInput(message)).join(" "),
          ...positionals.map(serializeInput)
        );
      }
      formatTimestamp(timestamp) {
        return `${timestamp.toLocaleTimeString(
          "en-GB"
        )}:${timestamp.getMilliseconds()}`;
      }
      getWriter(level) {
        switch (level) {
          case "debug":
          case "success":
          case "info": {
            return log;
          }
          case "warning": {
            return warn;
          }
          case "error": {
            return error;
          }
        }
      }
    };
    var PerformanceEntry = class {
      constructor() {
        __publicField(this, "startTime");
        __publicField(this, "endTime");
        __publicField(this, "deltaTime");
        this.startTime = performance.now();
      }
      measure() {
        this.endTime = performance.now();
        const deltaTime = this.endTime - this.startTime;
        this.deltaTime = deltaTime.toFixed(2);
      }
    };
    var noop = () => void 0;
    function log(message, ...positionals) {
      if (IS_NODE) {
        process.stdout.write(format(message, ...positionals) + "\n");
        return;
      }
      console.log(message, ...positionals);
    }
    function warn(message, ...positionals) {
      if (IS_NODE) {
        process.stderr.write(format(message, ...positionals) + "\n");
        return;
      }
      console.warn(message, ...positionals);
    }
    function error(message, ...positionals) {
      if (IS_NODE) {
        process.stderr.write(format(message, ...positionals) + "\n");
        return;
      }
      console.error(message, ...positionals);
    }
    function getVariable(variableName) {
      var _a2;
      if (IS_NODE) {
        return process.env[variableName];
      }
      return (_a2 = globalThis[variableName]) == null ? void 0 : _a2.toString();
    }
    function isDefinedAndNotEquals(value, expected) {
      return value !== void 0 && value !== expected;
    }
    function serializeInput(message) {
      if (typeof message === "undefined") {
        return "undefined";
      }
      if (message === null) {
        return "null";
      }
      if (typeof message === "string") {
        return message;
      }
      if (typeof message === "object") {
        return JSON.stringify(message);
      }
      return message.toString();
    }
    var MemoryLeakError = class extends Error {
      constructor(emitter, type, count) {
        super(
          `Possible EventEmitter memory leak detected. ${count} ${type.toString()} listeners added. Use emitter.setMaxListeners() to increase limit`
        );
        this.emitter = emitter;
        this.type = type;
        this.count = count;
        this.name = "MaxListenersExceededWarning";
      }
    };
    var _Emitter = class {
      static listenerCount(emitter, eventName) {
        return emitter.listenerCount(eventName);
      }
      constructor() {
        this.events = /* @__PURE__ */ new Map();
        this.maxListeners = _Emitter.defaultMaxListeners;
        this.hasWarnedAboutPotentialMemoryLeak = false;
      }
      _emitInternalEvent(internalEventName, eventName, listener) {
        this.emit(
          internalEventName,
          ...[eventName, listener]
        );
      }
      _getListeners(eventName) {
        return Array.prototype.concat.apply([], this.events.get(eventName)) || [];
      }
      _removeListener(listeners, listener) {
        const index = listeners.indexOf(listener);
        if (index > -1) {
          listeners.splice(index, 1);
        }
        return [];
      }
      _wrapOnceListener(eventName, listener) {
        const onceListener = (...data) => {
          this.removeListener(eventName, onceListener);
          return listener.apply(this, data);
        };
        Object.defineProperty(onceListener, "name", { value: listener.name });
        return onceListener;
      }
      setMaxListeners(maxListeners) {
        this.maxListeners = maxListeners;
        return this;
      }
      /**
       * Returns the current max listener value for the `Emitter` which is
       * either set by `emitter.setMaxListeners(n)` or defaults to
       * `Emitter.defaultMaxListeners`.
       */
      getMaxListeners() {
        return this.maxListeners;
      }
      /**
       * Returns an array listing the events for which the emitter has registered listeners.
       * The values in the array will be strings or Symbols.
       */
      eventNames() {
        return Array.from(this.events.keys());
      }
      /**
       * Synchronously calls each of the listeners registered for the event named `eventName`,
       * in the order they were registered, passing the supplied arguments to each.
       * Returns `true` if the event has listeners, `false` otherwise.
       *
       * @example
       * const emitter = new Emitter<{ hello: [string] }>()
       * emitter.emit('hello', 'John')
       */
      emit(eventName, ...data) {
        const listeners = this._getListeners(eventName);
        listeners.forEach((listener) => {
          listener.apply(this, data);
        });
        return listeners.length > 0;
      }
      addListener(eventName, listener) {
        this._emitInternalEvent("newListener", eventName, listener);
        const nextListeners = this._getListeners(eventName).concat(listener);
        this.events.set(eventName, nextListeners);
        if (this.maxListeners > 0 && this.listenerCount(eventName) > this.maxListeners && !this.hasWarnedAboutPotentialMemoryLeak) {
          this.hasWarnedAboutPotentialMemoryLeak = true;
          const memoryLeakWarning = new MemoryLeakError(
            this,
            eventName,
            this.listenerCount(eventName)
          );
          console.warn(memoryLeakWarning);
        }
        return this;
      }
      on(eventName, listener) {
        return this.addListener(eventName, listener);
      }
      once(eventName, listener) {
        return this.addListener(
          eventName,
          this._wrapOnceListener(eventName, listener)
        );
      }
      prependListener(eventName, listener) {
        const listeners = this._getListeners(eventName);
        if (listeners.length > 0) {
          const nextListeners = [listener].concat(listeners);
          this.events.set(eventName, nextListeners);
        } else {
          this.events.set(eventName, listeners.concat(listener));
        }
        return this;
      }
      prependOnceListener(eventName, listener) {
        return this.prependListener(
          eventName,
          this._wrapOnceListener(eventName, listener)
        );
      }
      removeListener(eventName, listener) {
        const listeners = this._getListeners(eventName);
        if (listeners.length > 0) {
          this._removeListener(listeners, listener);
          this.events.set(eventName, listeners);
          this._emitInternalEvent("removeListener", eventName, listener);
        }
        return this;
      }
      /**
       * Alias for `emitter.removeListener()`.
       *
       * @example
       * emitter.off('hello', listener)
       */
      off(eventName, listener) {
        return this.removeListener(eventName, listener);
      }
      removeAllListeners(eventName) {
        if (eventName) {
          this.events.delete(eventName);
        } else {
          this.events.clear();
        }
        return this;
      }
      /**
       * Returns a copy of the array of listeners for the event named `eventName`.
       */
      listeners(eventName) {
        return Array.from(this._getListeners(eventName));
      }
      /**
       * Returns the number of listeners listening to the event named `eventName`.
       */
      listenerCount(eventName) {
        return this._getListeners(eventName).length;
      }
      rawListeners(eventName) {
        return this.listeners(eventName);
      }
    };
    var Emitter = _Emitter;
    Emitter.defaultMaxListeners = 10;
    var INTERNAL_REQUEST_ID_HEADER_NAME = "x-interceptors-internal-request-id";
    function getGlobalSymbol(symbol) {
      return (
        // @ts-ignore https://github.com/Microsoft/TypeScript/issues/24587
        globalThis[symbol] || void 0
      );
    }
    function setGlobalSymbol(symbol, value) {
      globalThis[symbol] = value;
    }
    function deleteGlobalSymbol(symbol) {
      delete globalThis[symbol];
    }
    var Interceptor = class {
      constructor(symbol) {
        this.symbol = symbol;
        this.readyState = "INACTIVE";
        this.emitter = new Emitter();
        this.subscriptions = [];
        this.logger = new Logger(symbol.description);
        this.emitter.setMaxListeners(0);
        this.logger.info("constructing the interceptor...");
      }
      /**
       * Determine if this interceptor can be applied
       * in the current environment.
       */
      checkEnvironment() {
        return true;
      }
      /**
       * Apply this interceptor to the current process.
       * Returns an already running interceptor instance if it's present.
       */
      apply() {
        const logger = this.logger.extend("apply");
        logger.info("applying the interceptor...");
        if (this.readyState === "APPLIED") {
          logger.info("intercepted already applied!");
          return;
        }
        const shouldApply = this.checkEnvironment();
        if (!shouldApply) {
          logger.info("the interceptor cannot be applied in this environment!");
          return;
        }
        this.readyState = "APPLYING";
        const runningInstance = this.getInstance();
        if (runningInstance) {
          logger.info("found a running instance, reusing...");
          this.on = (event, listener) => {
            logger.info('proxying the "%s" listener', event);
            runningInstance.emitter.addListener(event, listener);
            this.subscriptions.push(() => {
              runningInstance.emitter.removeListener(event, listener);
              logger.info('removed proxied "%s" listener!', event);
            });
            return this;
          };
          this.readyState = "APPLIED";
          return;
        }
        logger.info("no running instance found, setting up a new instance...");
        this.setup();
        this.setInstance();
        this.readyState = "APPLIED";
      }
      /**
       * Setup the module augments and stubs necessary for this interceptor.
       * This method is not run if there's a running interceptor instance
       * to prevent instantiating an interceptor multiple times.
       */
      setup() {
      }
      /**
       * Listen to the interceptor's public events.
       */
      on(event, listener) {
        const logger = this.logger.extend("on");
        if (this.readyState === "DISPOSING" || this.readyState === "DISPOSED") {
          logger.info("cannot listen to events, already disposed!");
          return this;
        }
        logger.info('adding "%s" event listener:', event, listener);
        this.emitter.on(event, listener);
        return this;
      }
      once(event, listener) {
        this.emitter.once(event, listener);
        return this;
      }
      off(event, listener) {
        this.emitter.off(event, listener);
        return this;
      }
      removeAllListeners(event) {
        this.emitter.removeAllListeners(event);
        return this;
      }
      /**
       * Disposes of any side-effects this interceptor has introduced.
       */
      dispose() {
        const logger = this.logger.extend("dispose");
        if (this.readyState === "DISPOSED") {
          logger.info("cannot dispose, already disposed!");
          return;
        }
        logger.info("disposing the interceptor...");
        this.readyState = "DISPOSING";
        if (!this.getInstance()) {
          logger.info("no interceptors running, skipping dispose...");
          return;
        }
        this.clearInstance();
        logger.info("global symbol deleted:", getGlobalSymbol(this.symbol));
        if (this.subscriptions.length > 0) {
          logger.info("disposing of %d subscriptions...", this.subscriptions.length);
          for (const dispose of this.subscriptions) {
            dispose();
          }
          this.subscriptions = [];
          logger.info("disposed of all subscriptions!", this.subscriptions.length);
        }
        this.emitter.removeAllListeners();
        logger.info("destroyed the listener!");
        this.readyState = "DISPOSED";
      }
      getInstance() {
        var _a2;
        const instance = getGlobalSymbol(this.symbol);
        this.logger.info("retrieved global instance:", (_a2 = instance == null ? void 0 : instance.constructor) == null ? void 0 : _a2.name);
        return instance;
      }
      setInstance() {
        setGlobalSymbol(this.symbol, this);
        this.logger.info("set global instance!", this.symbol.description);
      }
      clearInstance() {
        deleteGlobalSymbol(this.symbol);
        this.logger.info("cleared global instance!", this.symbol.description);
      }
    };
    function createRequestId() {
      return Math.random().toString(16).slice(2);
    }
    var BatchInterceptor = class extends Interceptor {
      constructor(options) {
        BatchInterceptor.symbol = Symbol(options.name);
        super(BatchInterceptor.symbol);
        this.interceptors = options.interceptors;
      }
      setup() {
        const logger = this.logger.extend("setup");
        logger.info("applying all %d interceptors...", this.interceptors.length);
        for (const interceptor of this.interceptors) {
          logger.info('applying "%s" interceptor...', interceptor.constructor.name);
          interceptor.apply();
          logger.info("adding interceptor dispose subscription");
          this.subscriptions.push(() => interceptor.dispose());
        }
      }
      on(event, listener) {
        for (const interceptor of this.interceptors) {
          interceptor.on(event, listener);
        }
        return this;
      }
      once(event, listener) {
        for (const interceptor of this.interceptors) {
          interceptor.once(event, listener);
        }
        return this;
      }
      off(event, listener) {
        for (const interceptor of this.interceptors) {
          interceptor.off(event, listener);
        }
        return this;
      }
      removeAllListeners(event) {
        for (const interceptors of this.interceptors) {
          interceptors.removeAllListeners(event);
        }
        return this;
      }
    };
    function createResponseListener(context) {
      return (_, message) => {
        var _a2;
        const { payload: responseJson } = message;
        const { requestId } = responseJson;
        const request = context.requests.get(requestId);
        context.requests.delete(requestId);
        if ((_a2 = responseJson.type) == null ? void 0 : _a2.includes("opaque")) {
          return;
        }
        const response = responseJson.status === 0 ? Response.error() : new Response(
          /**
           * Responses may be streams here, but when we create a response object
           * with null-body status codes, like 204, 205, 304 Response will
           * throw when passed a non-null body, so ensure it's null here
           * for those codes
           */
          isResponseWithoutBody(responseJson.status) ? null : responseJson.body,
          responseJson
        );
        if (!response.url) {
          Object.defineProperty(response, "url", {
            value: request.url,
            enumerable: true,
            writable: false
          });
        }
        context.emitter.emit(
          responseJson.isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId: responseJson.requestId
          }
        );
      };
    }
    var import_devUtils6 = require_devUtils();
    function validateWorkerScope(registration, options) {
      if (!(options == null ? void 0 : options.quiet) && !location.href.startsWith(registration.scope)) {
        import_devUtils6.devUtils.warn(
          `Cannot intercept requests on this page because it's outside of the worker's scope ("${registration.scope}"). If you wish to mock API requests on this page, you must resolve this scope issue.

- (Recommended) Register the worker at the root level ("/") of your application.
- Set the "Service-Worker-Allowed" response header to allow out-of-scope workers.`
        );
      }
    }
    var createStartHandler = (context) => {
      return function start(options, customOptions) {
        const startWorkerInstance = async () => {
          context.events.removeAllListeners();
          context.workerChannel.on(
            "REQUEST",
            createRequestListener(context, options)
          );
          context.workerChannel.on("RESPONSE", createResponseListener(context));
          const instance = await getWorkerInstance(
            options.serviceWorker.url,
            options.serviceWorker.options,
            options.findWorker
          );
          const [worker, registration] = instance;
          if (!worker) {
            const missingWorkerMessage = (customOptions == null ? void 0 : customOptions.findWorker) ? import_devUtils7.devUtils.formatMessage(
              `Failed to locate the Service Worker registration using a custom "findWorker" predicate.

Please ensure that the custom predicate properly locates the Service Worker registration at "%s".
More details: https://mswjs.io/docs/api/setup-worker/start#findworker
`,
              options.serviceWorker.url
            ) : import_devUtils7.devUtils.formatMessage(
              `Failed to locate the Service Worker registration.

This most likely means that the worker script URL "%s" cannot resolve against the actual public hostname (%s). This may happen if your application runs behind a proxy, or has a dynamic hostname.

Please consider using a custom "serviceWorker.url" option to point to the actual worker script location, or a custom "findWorker" option to resolve the Service Worker registration manually. More details: https://mswjs.io/docs/api/setup-worker/start`,
              options.serviceWorker.url,
              location.host
            );
            throw new Error(missingWorkerMessage);
          }
          context.worker = worker;
          context.registration = registration;
          context.events.addListener(window, "beforeunload", () => {
            if (worker.state !== "redundant") {
              context.workerChannel.send("CLIENT_CLOSED");
            }
            window.clearInterval(context.keepAliveInterval);
          });
          await checkWorkerIntegrity(context).catch((error2) => {
            import_devUtils7.devUtils.error(
              "Error while checking the worker script integrity. Please report this on GitHub (https://github.com/mswjs/msw/issues), including the original error below."
            );
            console.error(error2);
          });
          context.keepAliveInterval = window.setInterval(
            () => context.workerChannel.send("KEEPALIVE_REQUEST"),
            5e3
          );
          validateWorkerScope(registration, context.startOptions);
          return registration;
        };
        const workerRegistration = startWorkerInstance().then(
          async (registration) => {
            const pendingInstance = registration.installing || registration.waiting;
            if (pendingInstance) {
              await new Promise((resolve) => {
                pendingInstance.addEventListener("statechange", () => {
                  if (pendingInstance.state === "activated") {
                    return resolve();
                  }
                });
              });
            }
            await enableMocking(context, options).catch((error2) => {
              throw new Error(`Failed to enable mocking: ${error2 == null ? void 0 : error2.message}`);
            });
            return registration;
          }
        );
        return workerRegistration;
      };
    };
    var import_devUtils9 = require_devUtils();
    var import_devUtils8 = require_devUtils();
    function printStopMessage(args = {}) {
      if (args.quiet) {
        return;
      }
      console.log(
        `%c${import_devUtils8.devUtils.formatMessage("Mocking disabled.")}`,
        "color:orangered;font-weight:bold;"
      );
    }
    var createStop = (context) => {
      return function stop() {
        var _a2;
        if (!context.isMockingEnabled) {
          import_devUtils9.devUtils.warn(
            'Found a redundant "worker.stop()" call. Note that stopping the worker while mocking already stopped has no effect. Consider removing this "worker.stop()" call.'
          );
          return;
        }
        context.workerChannel.send("MOCK_DEACTIVATE");
        context.isMockingEnabled = false;
        window.clearInterval(context.keepAliveInterval);
        printStopMessage({ quiet: (_a2 = context.startOptions) == null ? void 0 : _a2.quiet });
      };
    };
    var import_mergeRight = require_mergeRight();
    var DEFAULT_START_OPTIONS = {
      serviceWorker: {
        url: "/mockServiceWorker.js",
        options: null
      },
      quiet: false,
      waitUntilReady: true,
      onUnhandledRequest: "warn",
      findWorker(scriptURL, mockServiceWorkerUrl) {
        return scriptURL === mockServiceWorkerUrl;
      }
    };
    function createDeferredExecutor() {
      const executor = (resolve, reject) => {
        executor.state = "pending";
        executor.resolve = (data) => {
          if (executor.state !== "pending") {
            return;
          }
          executor.result = data;
          const onFulfilled = (value) => {
            executor.state = "fulfilled";
            return value;
          };
          return resolve(
            data instanceof Promise ? data : Promise.resolve(data).then(onFulfilled)
          );
        };
        executor.reject = (reason) => {
          if (executor.state !== "pending") {
            return;
          }
          queueMicrotask(() => {
            executor.state = "rejected";
          });
          return reject(executor.rejectionReason = reason);
        };
      };
      return executor;
    }
    var _executor, _decorate, decorate_fn, _a;
    var DeferredPromise = (_a = class extends Promise {
      constructor(executor = null) {
        const deferredExecutor = createDeferredExecutor();
        super((originalResolve, originalReject) => {
          deferredExecutor(originalResolve, originalReject);
          executor == null ? void 0 : executor(deferredExecutor.resolve, deferredExecutor.reject);
        });
        __privateAdd(this, _decorate);
        __privateAdd(this, _executor, void 0);
        __publicField(this, "resolve");
        __publicField(this, "reject");
        __privateSet(this, _executor, deferredExecutor);
        this.resolve = __privateGet(this, _executor).resolve;
        this.reject = __privateGet(this, _executor).reject;
      }
      get state() {
        return __privateGet(this, _executor).state;
      }
      get rejectionReason() {
        return __privateGet(this, _executor).rejectionReason;
      }
      then(onFulfilled, onRejected) {
        return __privateMethod(this, _decorate, decorate_fn).call(this, super.then(onFulfilled, onRejected));
      }
      catch(onRejected) {
        return __privateMethod(this, _decorate, decorate_fn).call(this, super.catch(onRejected));
      }
      finally(onfinally) {
        return __privateMethod(this, _decorate, decorate_fn).call(this, super.finally(onfinally));
      }
    }, _executor = new WeakMap(), _decorate = new WeakSet(), decorate_fn = function(promise) {
      return Object.defineProperties(promise, {
        resolve: { configurable: true, value: this.resolve },
        reject: { configurable: true, value: this.reject }
      });
    }, _a);
    var RequestController = class {
      constructor(request) {
        this.request = request;
        this.responsePromise = new DeferredPromise();
      }
      respondWith(response) {
        invariant(
          this.responsePromise.state === "pending",
          'Failed to respond to "%s %s" request: the "request" event has already been responded to.',
          this.request.method,
          this.request.url
        );
        this.responsePromise.resolve(response);
      }
    };
    function toInteractiveRequest(request) {
      const requestController = new RequestController(request);
      Reflect.set(
        request,
        "respondWith",
        requestController.respondWith.bind(requestController)
      );
      return {
        interactiveRequest: request,
        requestController
      };
    }
    async function emitAsync(emitter, eventName, ...data) {
      const listners = emitter.listeners(eventName);
      if (listners.length === 0) {
        return;
      }
      for (const listener of listners) {
        await listener.apply(emitter, data);
      }
    }
    function isPropertyAccessible(obj, key) {
      try {
        obj[key];
        return true;
      } catch (e) {
        return false;
      }
    }
    function canParseUrl(url) {
      try {
        new URL(url);
        return true;
      } catch (_error) {
        return false;
      }
    }
    var _FetchInterceptor = class extends Interceptor {
      constructor() {
        super(_FetchInterceptor.symbol);
      }
      checkEnvironment() {
        return typeof globalThis !== "undefined" && typeof globalThis.fetch !== "undefined";
      }
      async setup() {
        const pureFetch = globalThis.fetch;
        invariant(
          !pureFetch[IS_PATCHED_MODULE],
          'Failed to patch the "fetch" module: already patched.'
        );
        globalThis.fetch = async (input, init) => {
          var _a2;
          const requestId = createRequestId();
          const resolvedInput = typeof input === "string" && typeof location !== "undefined" && !canParseUrl(input) ? new URL(input, location.origin) : input;
          const request = new Request(resolvedInput, init);
          this.logger.info("[%s] %s", request.method, request.url);
          const { interactiveRequest, requestController } = toInteractiveRequest(request);
          this.logger.info(
            'emitting the "request" event for %d listener(s)...',
            this.emitter.listenerCount("request")
          );
          this.emitter.once("request", ({ requestId: pendingRequestId }) => {
            if (pendingRequestId !== requestId) {
              return;
            }
            if (requestController.responsePromise.state === "pending") {
              requestController.responsePromise.resolve(void 0);
            }
          });
          this.logger.info("awaiting for the mocked response...");
          const signal = interactiveRequest.signal;
          const requestAborted = new DeferredPromise();
          if (signal) {
            signal.addEventListener(
              "abort",
              () => {
                requestAborted.reject(signal.reason);
              },
              { once: true }
            );
          }
          const resolverResult = await until(async () => {
            const listenersFinished = emitAsync(this.emitter, "request", {
              request: interactiveRequest,
              requestId
            });
            await Promise.race([
              requestAborted,
              // Put the listeners invocation Promise in the same race condition
              // with the request abort Promise because otherwise awaiting the listeners
              // would always yield some response (or undefined).
              listenersFinished,
              requestController.responsePromise
            ]);
            this.logger.info("all request listeners have been resolved!");
            const mockedResponse2 = await requestController.responsePromise;
            this.logger.info("event.respondWith called with:", mockedResponse2);
            return mockedResponse2;
          });
          if (requestAborted.state === "rejected") {
            return Promise.reject(requestAborted.rejectionReason);
          }
          if (resolverResult.error) {
            return Promise.reject(createNetworkError(resolverResult.error));
          }
          const mockedResponse = resolverResult.data;
          if (mockedResponse && !((_a2 = request.signal) == null ? void 0 : _a2.aborted)) {
            this.logger.info("received mocked response:", mockedResponse);
            if (isPropertyAccessible(mockedResponse, "type") && mockedResponse.type === "error") {
              this.logger.info(
                "received a network error response, rejecting the request promise..."
              );
              return Promise.reject(createNetworkError(mockedResponse));
            }
            const responseClone = mockedResponse.clone();
            this.emitter.emit("response", {
              response: responseClone,
              isMockedResponse: true,
              request: interactiveRequest,
              requestId
            });
            Object.defineProperty(mockedResponse, "url", {
              writable: false,
              enumerable: true,
              configurable: false,
              value: request.url
            });
            return mockedResponse;
          }
          this.logger.info("no mocked response received!");
          return pureFetch(request).then((response) => {
            const responseClone = response.clone();
            this.logger.info("original fetch performed", responseClone);
            this.emitter.emit("response", {
              response: responseClone,
              isMockedResponse: false,
              request: interactiveRequest,
              requestId
            });
            return response;
          });
        };
        Object.defineProperty(globalThis.fetch, IS_PATCHED_MODULE, {
          enumerable: true,
          configurable: true,
          value: true
        });
        this.subscriptions.push(() => {
          Object.defineProperty(globalThis.fetch, IS_PATCHED_MODULE, {
            value: void 0
          });
          globalThis.fetch = pureFetch;
          this.logger.info(
            'restored native "globalThis.fetch"!',
            globalThis.fetch.name
          );
        });
      }
    };
    var FetchInterceptor = _FetchInterceptor;
    FetchInterceptor.symbol = Symbol("fetch");
    function createNetworkError(cause) {
      return Object.assign(new TypeError("Failed to fetch"), {
        cause
      });
    }
    function concatArrayBuffer(left, right) {
      const result = new Uint8Array(left.byteLength + right.byteLength);
      result.set(left, 0);
      result.set(right, left.byteLength);
      return result;
    }
    var EventPolyfill = class {
      constructor(type, options) {
        this.AT_TARGET = 0;
        this.BUBBLING_PHASE = 0;
        this.CAPTURING_PHASE = 0;
        this.NONE = 0;
        this.type = "";
        this.srcElement = null;
        this.currentTarget = null;
        this.eventPhase = 0;
        this.isTrusted = true;
        this.composed = false;
        this.cancelable = true;
        this.defaultPrevented = false;
        this.bubbles = true;
        this.lengthComputable = true;
        this.loaded = 0;
        this.total = 0;
        this.cancelBubble = false;
        this.returnValue = true;
        this.type = type;
        this.target = (options == null ? void 0 : options.target) || null;
        this.currentTarget = (options == null ? void 0 : options.currentTarget) || null;
        this.timeStamp = Date.now();
      }
      composedPath() {
        return [];
      }
      initEvent(type, bubbles, cancelable) {
        this.type = type;
        this.bubbles = !!bubbles;
        this.cancelable = !!cancelable;
      }
      preventDefault() {
        this.defaultPrevented = true;
      }
      stopPropagation() {
      }
      stopImmediatePropagation() {
      }
    };
    var ProgressEventPolyfill = class extends EventPolyfill {
      constructor(type, init) {
        super(type);
        this.lengthComputable = (init == null ? void 0 : init.lengthComputable) || false;
        this.composed = (init == null ? void 0 : init.composed) || false;
        this.loaded = (init == null ? void 0 : init.loaded) || 0;
        this.total = (init == null ? void 0 : init.total) || 0;
      }
    };
    var SUPPORTS_PROGRESS_EVENT = typeof ProgressEvent !== "undefined";
    function createEvent(target, type, init) {
      const progressEvents = [
        "error",
        "progress",
        "loadstart",
        "loadend",
        "load",
        "timeout",
        "abort"
      ];
      const ProgressEventClass = SUPPORTS_PROGRESS_EVENT ? ProgressEvent : ProgressEventPolyfill;
      const event = progressEvents.includes(type) ? new ProgressEventClass(type, {
        lengthComputable: true,
        loaded: (init == null ? void 0 : init.loaded) || 0,
        total: (init == null ? void 0 : init.total) || 0
      }) : new EventPolyfill(type, {
        target,
        currentTarget: target
      });
      return event;
    }
    function findPropertySource(target, propertyName) {
      if (!(propertyName in target)) {
        return null;
      }
      const hasProperty = Object.prototype.hasOwnProperty.call(target, propertyName);
      if (hasProperty) {
        return target;
      }
      const prototype = Reflect.getPrototypeOf(target);
      return prototype ? findPropertySource(prototype, propertyName) : null;
    }
    function createProxy(target, options) {
      const proxy = new Proxy(target, optionsToProxyHandler(options));
      return proxy;
    }
    function optionsToProxyHandler(options) {
      const { constructorCall, methodCall, getProperty, setProperty } = options;
      const handler = {};
      if (typeof constructorCall !== "undefined") {
        handler.construct = function(target, args, newTarget) {
          const next = Reflect.construct.bind(null, target, args, newTarget);
          return constructorCall.call(newTarget, args, next);
        };
      }
      handler.set = function(target, propertyName, nextValue) {
        const next = () => {
          const propertySource = findPropertySource(target, propertyName) || target;
          const ownDescriptors = Reflect.getOwnPropertyDescriptor(
            propertySource,
            propertyName
          );
          if (typeof (ownDescriptors == null ? void 0 : ownDescriptors.set) !== "undefined") {
            ownDescriptors.set.apply(target, [nextValue]);
            return true;
          }
          return Reflect.defineProperty(propertySource, propertyName, {
            writable: true,
            enumerable: true,
            configurable: true,
            value: nextValue
          });
        };
        if (typeof setProperty !== "undefined") {
          return setProperty.call(target, [propertyName, nextValue], next);
        }
        return next();
      };
      handler.get = function(target, propertyName, receiver) {
        const next = () => target[propertyName];
        const value = typeof getProperty !== "undefined" ? getProperty.call(target, [propertyName, receiver], next) : next();
        if (typeof value === "function") {
          return (...args) => {
            const next2 = value.bind(target, ...args);
            if (typeof methodCall !== "undefined") {
              return methodCall.call(target, [propertyName, args], next2);
            }
            return next2();
          };
        }
        return value;
      };
      return handler;
    }
    function isDomParserSupportedType(type) {
      const supportedTypes = [
        "application/xhtml+xml",
        "application/xml",
        "image/svg+xml",
        "text/html",
        "text/xml"
      ];
      return supportedTypes.some((supportedType) => {
        return type.startsWith(supportedType);
      });
    }
    function parseJson(data) {
      try {
        const json = JSON.parse(data);
        return json;
      } catch (_) {
        return null;
      }
    }
    function createResponse(request, body) {
      const responseBodyOrNull = isResponseWithoutBody(request.status) ? null : body;
      return new Response(responseBodyOrNull, {
        status: request.status,
        statusText: request.statusText,
        headers: createHeadersFromXMLHttpReqestHeaders(
          request.getAllResponseHeaders()
        )
      });
    }
    function createHeadersFromXMLHttpReqestHeaders(headersString) {
      const headers = new Headers();
      const lines = headersString.split(/[\r\n]+/);
      for (const line of lines) {
        if (line.trim() === "") {
          continue;
        }
        const [name, ...parts] = line.split(": ");
        const value = parts.join(": ");
        headers.append(name, value);
      }
      return headers;
    }
    var IS_MOCKED_RESPONSE = Symbol("isMockedResponse");
    var IS_NODE2 = isNodeProcess();
    var XMLHttpRequestController = class {
      constructor(initialRequest, logger) {
        this.initialRequest = initialRequest;
        this.logger = logger;
        this.method = "GET";
        this.url = null;
        this.events = /* @__PURE__ */ new Map();
        this.requestId = createRequestId();
        this.requestHeaders = new Headers();
        this.responseBuffer = new Uint8Array();
        this.request = createProxy(initialRequest, {
          setProperty: ([propertyName, nextValue], invoke) => {
            switch (propertyName) {
              case "ontimeout": {
                const eventName = propertyName.slice(
                  2
                );
                this.request.addEventListener(eventName, nextValue);
                return invoke();
              }
              default: {
                return invoke();
              }
            }
          },
          methodCall: ([methodName, args], invoke) => {
            var _a2;
            switch (methodName) {
              case "open": {
                const [method, url] = args;
                if (typeof url === "undefined") {
                  this.method = "GET";
                  this.url = toAbsoluteUrl(method);
                } else {
                  this.method = method;
                  this.url = toAbsoluteUrl(url);
                }
                this.logger = this.logger.extend(`${this.method} ${this.url.href}`);
                this.logger.info("open", this.method, this.url.href);
                return invoke();
              }
              case "addEventListener": {
                const [eventName, listener] = args;
                this.registerEvent(eventName, listener);
                this.logger.info("addEventListener", eventName, listener);
                return invoke();
              }
              case "setRequestHeader": {
                const [name, value] = args;
                this.requestHeaders.set(name, value);
                this.logger.info("setRequestHeader", name, value);
                return invoke();
              }
              case "send": {
                const [body] = args;
                if (body != null) {
                  this.requestBody = typeof body === "string" ? encodeBuffer(body) : body;
                }
                this.request.addEventListener("load", () => {
                  if (typeof this.onResponse !== "undefined") {
                    const fetchResponse = createResponse(
                      this.request,
                      /**
                       * The `response` property is the right way to read
                       * the ambiguous response body, as the request's "responseType" may differ.
                       * @see https://xhr.spec.whatwg.org/#the-response-attribute
                       */
                      this.request.response
                    );
                    this.onResponse.call(this, {
                      response: fetchResponse,
                      isMockedResponse: IS_MOCKED_RESPONSE in this.request,
                      request: fetchRequest,
                      requestId: this.requestId
                    });
                  }
                });
                const fetchRequest = this.toFetchApiRequest();
                const onceRequestSettled = ((_a2 = this.onRequest) == null ? void 0 : _a2.call(this, {
                  request: fetchRequest,
                  requestId: this.requestId
                })) || Promise.resolve();
                onceRequestSettled.finally(() => {
                  if (this.request.readyState < this.request.LOADING) {
                    this.logger.info(
                      "request callback settled but request has not been handled (readystate %d), performing as-is...",
                      this.request.readyState
                    );
                    if (IS_NODE2) {
                      this.request.setRequestHeader(
                        INTERNAL_REQUEST_ID_HEADER_NAME,
                        this.requestId
                      );
                    }
                    return invoke();
                  }
                });
                break;
              }
              default: {
                return invoke();
              }
            }
          }
        });
      }
      registerEvent(eventName, listener) {
        const prevEvents = this.events.get(eventName) || [];
        const nextEvents = prevEvents.concat(listener);
        this.events.set(eventName, nextEvents);
        this.logger.info('registered event "%s"', eventName, listener);
      }
      /**
       * Responds to the current request with the given
       * Fetch API `Response` instance.
       */
      respondWith(response) {
        this.logger.info(
          "responding with a mocked response: %d %s",
          response.status,
          response.statusText
        );
        define(this.request, IS_MOCKED_RESPONSE, true);
        define(this.request, "status", response.status);
        define(this.request, "statusText", response.statusText);
        define(this.request, "responseURL", this.url.href);
        this.request.getResponseHeader = new Proxy(this.request.getResponseHeader, {
          apply: (_, __, args) => {
            this.logger.info("getResponseHeader", args[0]);
            if (this.request.readyState < this.request.HEADERS_RECEIVED) {
              this.logger.info("headers not received yet, returning null");
              return null;
            }
            const headerValue = response.headers.get(args[0]);
            this.logger.info(
              'resolved response header "%s" to',
              args[0],
              headerValue
            );
            return headerValue;
          }
        });
        this.request.getAllResponseHeaders = new Proxy(
          this.request.getAllResponseHeaders,
          {
            apply: () => {
              this.logger.info("getAllResponseHeaders");
              if (this.request.readyState < this.request.HEADERS_RECEIVED) {
                this.logger.info("headers not received yet, returning empty string");
                return "";
              }
              const headersList = Array.from(response.headers.entries());
              const allHeaders = headersList.map(([headerName, headerValue]) => {
                return `${headerName}: ${headerValue}`;
              }).join("\r\n");
              this.logger.info("resolved all response headers to", allHeaders);
              return allHeaders;
            }
          }
        );
        Object.defineProperties(this.request, {
          response: {
            enumerable: true,
            configurable: false,
            get: () => this.response
          },
          responseText: {
            enumerable: true,
            configurable: false,
            get: () => this.responseText
          },
          responseXML: {
            enumerable: true,
            configurable: false,
            get: () => this.responseXML
          }
        });
        const totalResponseBodyLength = response.headers.has("Content-Length") ? Number(response.headers.get("Content-Length")) : (
          /**
           * @todo Infer the response body length from the response body.
           */
          void 0
        );
        this.logger.info("calculated response body length", totalResponseBodyLength);
        this.trigger("loadstart", {
          loaded: 0,
          total: totalResponseBodyLength
        });
        this.setReadyState(this.request.HEADERS_RECEIVED);
        this.setReadyState(this.request.LOADING);
        const finalizeResponse = () => {
          this.logger.info("finalizing the mocked response...");
          this.setReadyState(this.request.DONE);
          this.trigger("load", {
            loaded: this.responseBuffer.byteLength,
            total: totalResponseBodyLength
          });
          this.trigger("loadend", {
            loaded: this.responseBuffer.byteLength,
            total: totalResponseBodyLength
          });
        };
        if (response.body) {
          this.logger.info("mocked response has body, streaming...");
          const reader = response.body.getReader();
          const readNextResponseBodyChunk = async () => {
            const { value, done } = await reader.read();
            if (done) {
              this.logger.info("response body stream done!");
              finalizeResponse();
              return;
            }
            if (value) {
              this.logger.info("read response body chunk:", value);
              this.responseBuffer = concatArrayBuffer(this.responseBuffer, value);
              this.trigger("progress", {
                loaded: this.responseBuffer.byteLength,
                total: totalResponseBodyLength
              });
            }
            readNextResponseBodyChunk();
          };
          readNextResponseBodyChunk();
        } else {
          finalizeResponse();
        }
      }
      responseBufferToText() {
        return decodeBuffer(this.responseBuffer);
      }
      get response() {
        this.logger.info(
          "getResponse (responseType: %s)",
          this.request.responseType
        );
        if (this.request.readyState !== this.request.DONE) {
          return null;
        }
        switch (this.request.responseType) {
          case "json": {
            const responseJson = parseJson(this.responseBufferToText());
            this.logger.info("resolved response JSON", responseJson);
            return responseJson;
          }
          case "arraybuffer": {
            const arrayBuffer = toArrayBuffer(this.responseBuffer);
            this.logger.info("resolved response ArrayBuffer", arrayBuffer);
            return arrayBuffer;
          }
          case "blob": {
            const mimeType = this.request.getResponseHeader("Content-Type") || "text/plain";
            const responseBlob = new Blob([this.responseBufferToText()], {
              type: mimeType
            });
            this.logger.info(
              "resolved response Blob (mime type: %s)",
              responseBlob,
              mimeType
            );
            return responseBlob;
          }
          default: {
            const responseText = this.responseBufferToText();
            this.logger.info(
              'resolving "%s" response type as text',
              this.request.responseType,
              responseText
            );
            return responseText;
          }
        }
      }
      get responseText() {
        invariant(
          this.request.responseType === "" || this.request.responseType === "text",
          "InvalidStateError: The object is in invalid state."
        );
        if (this.request.readyState !== this.request.LOADING && this.request.readyState !== this.request.DONE) {
          return "";
        }
        const responseText = this.responseBufferToText();
        this.logger.info('getResponseText: "%s"', responseText);
        return responseText;
      }
      get responseXML() {
        invariant(
          this.request.responseType === "" || this.request.responseType === "document",
          "InvalidStateError: The object is in invalid state."
        );
        if (this.request.readyState !== this.request.DONE) {
          return null;
        }
        const contentType = this.request.getResponseHeader("Content-Type") || "";
        if (typeof DOMParser === "undefined") {
          console.warn(
            "Cannot retrieve XMLHttpRequest response body as XML: DOMParser is not defined. You are likely using an environment that is not browser or does not polyfill browser globals correctly."
          );
          return null;
        }
        if (isDomParserSupportedType(contentType)) {
          return new DOMParser().parseFromString(
            this.responseBufferToText(),
            contentType
          );
        }
        return null;
      }
      errorWith(error2) {
        this.logger.info("responding with an error");
        this.setReadyState(this.request.DONE);
        this.trigger("error");
        this.trigger("loadend");
      }
      /**
       * Transitions this request's `readyState` to the given one.
       */
      setReadyState(nextReadyState) {
        this.logger.info(
          "setReadyState: %d -> %d",
          this.request.readyState,
          nextReadyState
        );
        if (this.request.readyState === nextReadyState) {
          this.logger.info("ready state identical, skipping transition...");
          return;
        }
        define(this.request, "readyState", nextReadyState);
        this.logger.info("set readyState to: %d", nextReadyState);
        if (nextReadyState !== this.request.UNSENT) {
          this.logger.info('triggerring "readystatechange" event...');
          this.trigger("readystatechange");
        }
      }
      /**
       * Triggers given event on the `XMLHttpRequest` instance.
       */
      trigger(eventName, options) {
        const callback = this.request[`on${eventName}`];
        const event = createEvent(this.request, eventName, options);
        this.logger.info('trigger "%s"', eventName, options || "");
        if (typeof callback === "function") {
          this.logger.info('found a direct "%s" callback, calling...', eventName);
          callback.call(this.request, event);
        }
        for (const [registeredEventName, listeners] of this.events) {
          if (registeredEventName === eventName) {
            this.logger.info(
              'found %d listener(s) for "%s" event, calling...',
              listeners.length,
              eventName
            );
            listeners.forEach((listener) => listener.call(this.request, event));
          }
        }
      }
      /**
       * Converts this `XMLHttpRequest` instance into a Fetch API `Request` instance.
       */
      toFetchApiRequest() {
        this.logger.info("converting request to a Fetch API Request...");
        const fetchRequest = new Request(this.url.href, {
          method: this.method,
          headers: this.requestHeaders,
          /**
           * @see https://xhr.spec.whatwg.org/#cross-origin-credentials
           */
          credentials: this.request.withCredentials ? "include" : "same-origin",
          body: ["GET", "HEAD"].includes(this.method) ? null : this.requestBody
        });
        const proxyHeaders = createProxy(fetchRequest.headers, {
          methodCall: ([methodName, args], invoke) => {
            switch (methodName) {
              case "append":
              case "set": {
                const [headerName, headerValue] = args;
                this.request.setRequestHeader(headerName, headerValue);
                break;
              }
              case "delete": {
                const [headerName] = args;
                console.warn(
                  `XMLHttpRequest: Cannot remove a "${headerName}" header from the Fetch API representation of the "${fetchRequest.method} ${fetchRequest.url}" request. XMLHttpRequest headers cannot be removed.`
                );
                break;
              }
            }
            return invoke();
          }
        });
        define(fetchRequest, "headers", proxyHeaders);
        this.logger.info("converted request to a Fetch API Request!", fetchRequest);
        return fetchRequest;
      }
    };
    function toAbsoluteUrl(url) {
      if (typeof location === "undefined") {
        return new URL(url);
      }
      return new URL(url.toString(), location.href);
    }
    function define(target, property, value) {
      Reflect.defineProperty(target, property, {
        // Ensure writable properties to allow redefining readonly properties.
        writable: true,
        enumerable: true,
        value
      });
    }
    function createXMLHttpRequestProxy({
      emitter,
      logger
    }) {
      const XMLHttpRequestProxy = new Proxy(globalThis.XMLHttpRequest, {
        construct(target, args, newTarget) {
          logger.info("constructed new XMLHttpRequest");
          const originalRequest = Reflect.construct(
            target,
            args,
            newTarget
          );
          const prototypeDescriptors = Object.getOwnPropertyDescriptors(
            target.prototype
          );
          for (const propertyName in prototypeDescriptors) {
            Reflect.defineProperty(
              originalRequest,
              propertyName,
              prototypeDescriptors[propertyName]
            );
          }
          const xhrRequestController = new XMLHttpRequestController(
            originalRequest,
            logger
          );
          xhrRequestController.onRequest = async function({ request, requestId }) {
            const { interactiveRequest, requestController } = toInteractiveRequest(request);
            this.logger.info("awaiting mocked response...");
            emitter.once("request", ({ requestId: pendingRequestId }) => {
              if (pendingRequestId !== requestId) {
                return;
              }
              if (requestController.responsePromise.state === "pending") {
                requestController.respondWith(void 0);
              }
            });
            const resolverResult = await until(async () => {
              this.logger.info(
                'emitting the "request" event for %s listener(s)...',
                emitter.listenerCount("request")
              );
              await emitAsync(emitter, "request", {
                request: interactiveRequest,
                requestId
              });
              this.logger.info('all "request" listeners settled!');
              const mockedResponse2 = await requestController.responsePromise;
              this.logger.info("event.respondWith called with:", mockedResponse2);
              return mockedResponse2;
            });
            if (resolverResult.error) {
              this.logger.info(
                "request listener threw an exception, aborting request...",
                resolverResult.error
              );
              xhrRequestController.errorWith(resolverResult.error);
              return;
            }
            const mockedResponse = resolverResult.data;
            if (typeof mockedResponse !== "undefined") {
              this.logger.info(
                "received mocked response: %d %s",
                mockedResponse.status,
                mockedResponse.statusText
              );
              if (mockedResponse.type === "error") {
                this.logger.info(
                  "received a network error response, rejecting the request promise..."
                );
                xhrRequestController.errorWith(new TypeError("Network error"));
                return;
              }
              return xhrRequestController.respondWith(mockedResponse);
            }
            this.logger.info(
              "no mocked response received, performing request as-is..."
            );
          };
          xhrRequestController.onResponse = async function({
            response,
            isMockedResponse,
            request,
            requestId
          }) {
            this.logger.info(
              'emitting the "response" event for %s listener(s)...',
              emitter.listenerCount("response")
            );
            emitter.emit("response", {
              response,
              isMockedResponse,
              request,
              requestId
            });
          };
          return xhrRequestController.request;
        }
      });
      return XMLHttpRequestProxy;
    }
    var _XMLHttpRequestInterceptor = class extends Interceptor {
      constructor() {
        super(_XMLHttpRequestInterceptor.interceptorSymbol);
      }
      checkEnvironment() {
        return typeof globalThis.XMLHttpRequest !== "undefined";
      }
      setup() {
        const logger = this.logger.extend("setup");
        logger.info('patching "XMLHttpRequest" module...');
        const PureXMLHttpRequest = globalThis.XMLHttpRequest;
        invariant(
          !PureXMLHttpRequest[IS_PATCHED_MODULE],
          'Failed to patch the "XMLHttpRequest" module: already patched.'
        );
        globalThis.XMLHttpRequest = createXMLHttpRequestProxy({
          emitter: this.emitter,
          logger: this.logger
        });
        logger.info(
          'native "XMLHttpRequest" module patched!',
          globalThis.XMLHttpRequest.name
        );
        Object.defineProperty(globalThis.XMLHttpRequest, IS_PATCHED_MODULE, {
          enumerable: true,
          configurable: true,
          value: true
        });
        this.subscriptions.push(() => {
          Object.defineProperty(globalThis.XMLHttpRequest, IS_PATCHED_MODULE, {
            value: void 0
          });
          globalThis.XMLHttpRequest = PureXMLHttpRequest;
          logger.info(
            'native "XMLHttpRequest" module restored!',
            globalThis.XMLHttpRequest.name
          );
        });
      }
    };
    var XMLHttpRequestInterceptor = _XMLHttpRequestInterceptor;
    XMLHttpRequestInterceptor.interceptorSymbol = Symbol("xhr");
    var import_handleRequest2 = require_handleRequest();
    function createFallbackRequestListener(context, options) {
      const interceptor = new BatchInterceptor({
        name: "fallback",
        interceptors: [new FetchInterceptor(), new XMLHttpRequestInterceptor()]
      });
      interceptor.on("request", async ({ request, requestId }) => {
        const requestCloneForLogs = request.clone();
        const response = await (0, import_handleRequest2.handleRequest)(
          request,
          requestId,
          context.getRequestHandlers(),
          options,
          context.emitter,
          {
            onMockedResponse(_, { handler, parsedResult }) {
              if (!options.quiet) {
                context.emitter.once("response:mocked", ({ response: response2 }) => {
                  handler.log({
                    request: requestCloneForLogs,
                    response: response2,
                    parsedResult
                  });
                });
              }
            }
          }
        );
        if (response) {
          request.respondWith(response);
        }
      });
      interceptor.on(
        "response",
        ({ response, isMockedResponse, request, requestId }) => {
          context.emitter.emit(
            isMockedResponse ? "response:mocked" : "response:bypass",
            {
              response,
              request,
              requestId
            }
          );
        }
      );
      interceptor.apply();
      return interceptor;
    }
    function createFallbackStart(context) {
      return async function start(options) {
        context.fallbackInterceptor = createFallbackRequestListener(
          context,
          options
        );
        printStartMessage({
          message: "Mocking enabled (fallback mode).",
          quiet: options.quiet
        });
        return void 0;
      };
    }
    function createFallbackStop(context) {
      return function stop() {
        var _a2, _b;
        (_a2 = context.fallbackInterceptor) == null ? void 0 : _a2.dispose();
        printStopMessage({ quiet: (_b = context.startOptions) == null ? void 0 : _b.quiet });
      };
    }
    var import_devUtils10 = require_devUtils();
    var import_SetupApi = require_SetupApi();
    var import_mergeRight2 = require_mergeRight();
    function supportsReadableStreamTransfer() {
      try {
        const stream = new ReadableStream({
          start: (controller) => controller.close()
        });
        const message = new MessageChannel();
        message.port1.postMessage(stream, [stream]);
        return true;
      } catch (error2) {
        return false;
      }
    }
    var SetupWorkerApi = class extends import_SetupApi.SetupApi {
      constructor(...handlers) {
        super(...handlers);
        __publicField(this, "context");
        __publicField(this, "startHandler", null);
        __publicField(this, "stopHandler", null);
        __publicField(this, "listeners");
        invariant(
          !isNodeProcess(),
          import_devUtils10.devUtils.formatMessage(
            "Failed to execute `setupWorker` in a non-browser environment. Consider using `setupServer` for Node.js environment instead."
          )
        );
        this.listeners = [];
        this.context = this.createWorkerContext();
      }
      createWorkerContext() {
        const context = {
          // Mocking is not considered enabled until the worker
          // signals back the successful activation event.
          isMockingEnabled: false,
          startOptions: null,
          worker: null,
          getRequestHandlers: () => {
            return this.handlersController.currentHandlers();
          },
          registration: null,
          requests: /* @__PURE__ */ new Map(),
          emitter: this.emitter,
          workerChannel: {
            on: (eventType, callback) => {
              this.context.events.addListener(navigator.serviceWorker, "message", (event) => {
                if (event.source !== this.context.worker) {
                  return;
                }
                const message = event.data;
                if (!message) {
                  return;
                }
                if (message.type === eventType) {
                  callback(event, message);
                }
              });
            },
            send: (type) => {
              var _a2;
              (_a2 = this.context.worker) == null ? void 0 : _a2.postMessage(type);
            }
          },
          events: {
            addListener: (target, eventType, callback) => {
              target.addEventListener(eventType, callback);
              this.listeners.push({
                eventType,
                target,
                callback
              });
              return () => {
                target.removeEventListener(eventType, callback);
              };
            },
            removeAllListeners: () => {
              for (const { target, eventType, callback } of this.listeners) {
                target.removeEventListener(eventType, callback);
              }
              this.listeners = [];
            },
            once: (eventType) => {
              const bindings = [];
              return new Promise((resolve, reject) => {
                const handleIncomingMessage = (event) => {
                  try {
                    const message = event.data;
                    if (message.type === eventType) {
                      resolve(message);
                    }
                  } catch (error2) {
                    reject(error2);
                  }
                };
                bindings.push(
                  this.context.events.addListener(
                    navigator.serviceWorker,
                    "message",
                    handleIncomingMessage
                  ),
                  this.context.events.addListener(
                    navigator.serviceWorker,
                    "messageerror",
                    reject
                  )
                );
              }).finally(() => {
                bindings.forEach((unbind) => unbind());
              });
            }
          },
          supports: {
            serviceWorkerApi: !("serviceWorker" in navigator) || location.protocol === "file:",
            readableStreamTransfer: supportsReadableStreamTransfer()
          }
        };
        this.startHandler = context.supports.serviceWorkerApi ? createFallbackStart(context) : createStartHandler(context);
        this.stopHandler = context.supports.serviceWorkerApi ? createFallbackStop(context) : createStop(context);
        return context;
      }
      async start(options = {}) {
        if (options.waitUntilReady === true) {
          import_devUtils10.devUtils.warn(
            'The "waitUntilReady" option has been deprecated. Please remove it from this "worker.start()" call. Follow the recommended Browser integration (https://mswjs.io/docs/integrations/browser) to eliminate any race conditions between the Service Worker registration and any requests made by your application on initial render.'
          );
        }
        this.context.startOptions = (0, import_mergeRight2.mergeRight)(
          DEFAULT_START_OPTIONS,
          options
        );
        return await this.startHandler(this.context.startOptions, options);
      }
      stop() {
        super.dispose();
        this.context.events.removeAllListeners();
        this.context.emitter.removeAllListeners();
        this.stopHandler();
      }
    };
    function setupWorker(...handlers) {
      return new SetupWorkerApi(...handlers);
    }
  }
});

// node_modules/.pnpm/msw-storybook-addon@2.0.0-beta.1_msw@2.2.14_typescript@5.4.5_/node_modules/msw-storybook-addon/dist/index.browser.js
var require_index_browser = __commonJS({
  "node_modules/.pnpm/msw-storybook-addon@2.0.0-beta.1_msw@2.2.14_typescript@5.4.5_/node_modules/msw-storybook-addon/dist/index.browser.js"(exports, module) {
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export(src_exports, {
      getWorker: () => getWorker,
      initialize: () => initialize,
      mswDecorator: () => mswDecorator,
      mswLoader: () => mswLoader
    });
    module.exports = __toCommonJS(src_exports);
    var import_browser = require_browser();
    var fileExtensionPattern = /\.(js|jsx|ts|tsx|mjs|woff|woff2|ttf|otf|eot)$/;
    var filteredURLSubstrings = [
      "sb-common-assets",
      "node_modules",
      "node-modules",
      "hot-update.json",
      "__webpack_hmr",
      "sb-vite"
    ];
    var shouldFilterUrl = (url) => {
      if (fileExtensionPattern.test(url)) {
        return true;
      }
      const isStorybookRequest = filteredURLSubstrings.some(
        (substring) => url.includes(substring)
      );
      if (isStorybookRequest) {
        return true;
      }
      return false;
    };
    var augmentInitializeOptions = (options) => {
      if (typeof (options == null ? void 0 : options.onUnhandledRequest) === "string") {
        return options;
      }
      return {
        ...options,
        // Filter requests that we know are not relevant to the user e.g. HMR, builder requests, statics assets, etc.
        onUnhandledRequest: (...args) => {
          const [{ url }, print] = args;
          if (shouldFilterUrl(url)) {
            return;
          }
          if (!(options == null ? void 0 : options.onUnhandledRequest)) {
            print.warning();
            return;
          }
          if (typeof (options == null ? void 0 : options.onUnhandledRequest) === "function") {
            options.onUnhandledRequest(...args);
          }
        }
      };
    };
    var api;
    function initialize(options, initialHandlers = []) {
      const worker = (0, import_browser.setupWorker)(...initialHandlers);
      worker.start(augmentInitializeOptions(options));
      api = worker;
      return worker;
    }
    function getWorker() {
      if (api === void 0) {
        throw new Error(
          `[MSW] Failed to retrieve the worker: no active worker found. Did you forget to call "initialize"?`
        );
      }
      return api;
    }
    function applyRequestHandlers(handlersListOrObject) {
      api == null ? void 0 : api.resetHandlers();
      if (handlersListOrObject == null) {
        return;
      }
      if (Array.isArray(handlersListOrObject) && handlersListOrObject.length > 0) {
        api.use(...handlersListOrObject);
        return;
      }
      if ("handlers" in handlersListOrObject && handlersListOrObject.handlers) {
        const handlers = Object.values(handlersListOrObject.handlers).filter(Boolean).reduce(
          (handlers2, handlersList) => handlers2.concat(handlersList),
          []
        );
        if (handlers.length > 0) {
          api.use(...handlers);
        }
        return;
      }
    }
    var mswDecorator = (storyFn, context) => {
      applyRequestHandlers(context.parameters.msw);
      return storyFn();
    };
    var mswLoader = async (context) => {
      applyRequestHandlers(context.parameters.msw);
      if (typeof window !== "undefined" && "navigator" in window && navigator.serviceWorker.controller) {
        await navigator.serviceWorker.ready;
      }
      return {};
    };
  }
});
export default require_index_browser();
//# sourceMappingURL=msw-storybook-addon.js.map
